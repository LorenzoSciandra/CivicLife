{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _dns = require('dns');\nvar _dns2 = _interopRequireDefault(_dns);\nvar _async = require('async');\nvar _async2 = _interopRequireDefault(_async);\nvar _shuffle = require('lodash/shuffle');\nvar _shuffle2 = _interopRequireDefault(_shuffle);\nvar _xor = require('lodash/xor');\nvar _xor2 = _interopRequireDefault(_xor);\nvar _Logger = require('./Logger');\nvar _Logger2 = _interopRequireDefault(_Logger);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction noop() {}\n\n/*\n  Locates a Eureka host using DNS lookups. The DNS records are looked up by a naming\n  convention and TXT records must be created according to the Eureka Wiki here:\n  https://github.com/Netflix/eureka/wiki/Configuring-Eureka-in-AWS-Cloud\n\n  Naming convention: txt.<REGION>.<HOST>\n */\n\nvar DnsClusterResolver = function () {\n  function DnsClusterResolver(config, logger) {\n    _classCallCheck(this, DnsClusterResolver);\n    this.logger = logger || new _Logger2.default();\n    this.serverList = undefined;\n    this.config = config;\n    if (!this.config.eureka.ec2Region) {\n      throw new Error('EC2 region was undefined. ' + 'config.eureka.ec2Region must be set to resolve Eureka using DNS records.');\n    }\n    if (this.config.eureka.clusterRefreshInterval) {\n      this.startClusterRefresh();\n    }\n  }\n  DnsClusterResolver.prototype.resolveEurekaUrl = function resolveEurekaUrl(callback) {\n    var _this = this;\n    var retryAttempt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.getCurrentCluster(function (err) {\n      if (err) return callback(err);\n      if (retryAttempt > 0) {\n        _this.serverList.push(_this.serverList.shift());\n      }\n      var _config$eureka = _this.config.eureka,\n        port = _config$eureka.port,\n        servicePath = _config$eureka.servicePath,\n        ssl = _config$eureka.ssl;\n      var protocol = ssl ? 'https' : 'http';\n      callback(null, protocol + '://' + _this.serverList[0] + ':' + port + servicePath);\n    });\n  };\n  DnsClusterResolver.prototype.getCurrentCluster = function getCurrentCluster(callback) {\n    var _this2 = this;\n    if (this.serverList) {\n      return callback(null, this.serverList);\n    }\n    this.refreshCurrentCluster(function (err) {\n      if (err) return callback(err);\n      return callback(null, _this2.serverList);\n    });\n  };\n  DnsClusterResolver.prototype.startClusterRefresh = function startClusterRefresh() {\n    var _this3 = this;\n    var refreshTimer = setInterval(function () {\n      _this3.refreshCurrentCluster(function (err) {\n        if (err) _this3.logger.warn(err.message);\n      });\n    }, this.config.eureka.clusterRefreshInterval);\n    refreshTimer.unref();\n  };\n  DnsClusterResolver.prototype.refreshCurrentCluster = function refreshCurrentCluster() {\n    var _this4 = this;\n    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;\n    this.resolveClusterHosts(function (err, hosts) {\n      if (err) return callback(err);\n      // if the cluster is the same (aside from order), we want to maintain our order\n      if ((0, _xor2.default)(_this4.serverList, hosts).length) {\n        _this4.serverList = hosts;\n        _this4.logger.info('Eureka cluster located, hosts will be used in the following order', _this4.serverList);\n      } else {\n        _this4.logger.debug('Eureka cluster hosts unchanged, maintaining current server list.');\n      }\n      callback();\n    });\n  };\n  DnsClusterResolver.prototype.resolveClusterHosts = function resolveClusterHosts() {\n    var _this5 = this;\n    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;\n    var _config$eureka2 = this.config.eureka,\n      ec2Region = _config$eureka2.ec2Region,\n      host = _config$eureka2.host,\n      preferSameZone = _config$eureka2.preferSameZone;\n    var dataCenterInfo = this.config.instance.dataCenterInfo;\n    var metadata = dataCenterInfo ? dataCenterInfo.metadata : undefined;\n    var availabilityZone = metadata ? metadata['availability-zone'] : undefined;\n    var dnsHost = 'txt.' + ec2Region + '.' + host;\n    _dns2.default.resolveTxt(dnsHost, function (err, addresses) {\n      var _ref;\n      if (err) {\n        return callback(new Error('Error resolving eureka cluster for region [' + ec2Region + '] using DNS: [' + err + ']'));\n      }\n      var zoneRecords = (_ref = []).concat.apply(_ref, addresses);\n      var dnsTasks = {};\n      zoneRecords.forEach(function (zoneRecord) {\n        dnsTasks[zoneRecord] = function (cb) {\n          _this5.resolveZoneHosts('txt.' + zoneRecord, cb);\n        };\n      });\n      _async2.default.parallel(dnsTasks, function (error, results) {\n        if (error) return callback(error);\n        var hosts = [];\n        var myZoneHosts = [];\n        Object.keys(results).forEach(function (zone) {\n          if (preferSameZone && availabilityZone && zone.lastIndexOf(availabilityZone, 0) === 0) {\n            myZoneHosts.push.apply(myZoneHosts, results[zone]);\n          } else {\n            hosts.push.apply(hosts, results[zone]);\n          }\n        });\n        var combinedHosts = [].concat((0, _shuffle2.default)(myZoneHosts), (0, _shuffle2.default)(hosts));\n        if (!combinedHosts.length) {\n          return callback(new Error('Unable to locate any Eureka hosts in any zone via DNS @ ' + dnsHost));\n        }\n        callback(null, combinedHosts);\n      });\n    });\n  };\n  DnsClusterResolver.prototype.resolveZoneHosts = function resolveZoneHosts(zoneRecord, callback) {\n    var _this6 = this;\n    _dns2.default.resolveTxt(zoneRecord, function (err, results) {\n      var _ref2;\n      if (err) {\n        _this6.logger.warn('Failed to resolve cluster zone ' + zoneRecord, err.message);\n        return callback(new Error('Error resolving cluster zone ' + zoneRecord + ': [' + err + ']'));\n      }\n      _this6.logger.debug('Found Eureka Servers @ ' + zoneRecord, results);\n      callback(null, (_ref2 = []).concat.apply(_ref2, results).filter(function (value) {\n        return !!value;\n      }));\n    });\n  };\n  return DnsClusterResolver;\n}();\nexports.default = DnsClusterResolver;","map":{"version":3,"names":["exports","__esModule","_dns","require","_dns2","_interopRequireDefault","_async","_async2","_shuffle","_shuffle2","_xor","_xor2","_Logger","_Logger2","obj","default","_classCallCheck","instance","Constructor","TypeError","noop","DnsClusterResolver","config","logger","serverList","undefined","eureka","ec2Region","Error","clusterRefreshInterval","startClusterRefresh","prototype","resolveEurekaUrl","callback","_this","retryAttempt","arguments","length","getCurrentCluster","err","push","shift","_config$eureka","port","servicePath","ssl","protocol","_this2","refreshCurrentCluster","_this3","refreshTimer","setInterval","warn","message","unref","_this4","resolveClusterHosts","hosts","info","debug","_this5","_config$eureka2","host","preferSameZone","dataCenterInfo","metadata","availabilityZone","dnsHost","resolveTxt","addresses","_ref","zoneRecords","concat","apply","dnsTasks","forEach","zoneRecord","cb","resolveZoneHosts","parallel","error","results","myZoneHosts","Object","keys","zone","lastIndexOf","combinedHosts","_this6","_ref2","filter","value"],"sources":["/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/node_modules/eureka-js-client/lib/DnsClusterResolver.js"],"sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _dns = require('dns');\n\nvar _dns2 = _interopRequireDefault(_dns);\n\nvar _async = require('async');\n\nvar _async2 = _interopRequireDefault(_async);\n\nvar _shuffle = require('lodash/shuffle');\n\nvar _shuffle2 = _interopRequireDefault(_shuffle);\n\nvar _xor = require('lodash/xor');\n\nvar _xor2 = _interopRequireDefault(_xor);\n\nvar _Logger = require('./Logger');\n\nvar _Logger2 = _interopRequireDefault(_Logger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction noop() {}\n\n/*\n  Locates a Eureka host using DNS lookups. The DNS records are looked up by a naming\n  convention and TXT records must be created according to the Eureka Wiki here:\n  https://github.com/Netflix/eureka/wiki/Configuring-Eureka-in-AWS-Cloud\n\n  Naming convention: txt.<REGION>.<HOST>\n */\n\nvar DnsClusterResolver = function () {\n  function DnsClusterResolver(config, logger) {\n    _classCallCheck(this, DnsClusterResolver);\n\n    this.logger = logger || new _Logger2.default();\n    this.serverList = undefined;\n    this.config = config;\n    if (!this.config.eureka.ec2Region) {\n      throw new Error('EC2 region was undefined. ' + 'config.eureka.ec2Region must be set to resolve Eureka using DNS records.');\n    }\n\n    if (this.config.eureka.clusterRefreshInterval) {\n      this.startClusterRefresh();\n    }\n  }\n\n  DnsClusterResolver.prototype.resolveEurekaUrl = function resolveEurekaUrl(callback) {\n    var _this = this;\n\n    var retryAttempt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    this.getCurrentCluster(function (err) {\n      if (err) return callback(err);\n\n      if (retryAttempt > 0) {\n        _this.serverList.push(_this.serverList.shift());\n      }\n      var _config$eureka = _this.config.eureka,\n          port = _config$eureka.port,\n          servicePath = _config$eureka.servicePath,\n          ssl = _config$eureka.ssl;\n\n      var protocol = ssl ? 'https' : 'http';\n      callback(null, protocol + '://' + _this.serverList[0] + ':' + port + servicePath);\n    });\n  };\n\n  DnsClusterResolver.prototype.getCurrentCluster = function getCurrentCluster(callback) {\n    var _this2 = this;\n\n    if (this.serverList) {\n      return callback(null, this.serverList);\n    }\n    this.refreshCurrentCluster(function (err) {\n      if (err) return callback(err);\n      return callback(null, _this2.serverList);\n    });\n  };\n\n  DnsClusterResolver.prototype.startClusterRefresh = function startClusterRefresh() {\n    var _this3 = this;\n\n    var refreshTimer = setInterval(function () {\n      _this3.refreshCurrentCluster(function (err) {\n        if (err) _this3.logger.warn(err.message);\n      });\n    }, this.config.eureka.clusterRefreshInterval);\n    refreshTimer.unref();\n  };\n\n  DnsClusterResolver.prototype.refreshCurrentCluster = function refreshCurrentCluster() {\n    var _this4 = this;\n\n    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;\n\n    this.resolveClusterHosts(function (err, hosts) {\n      if (err) return callback(err);\n      // if the cluster is the same (aside from order), we want to maintain our order\n      if ((0, _xor2.default)(_this4.serverList, hosts).length) {\n        _this4.serverList = hosts;\n        _this4.logger.info('Eureka cluster located, hosts will be used in the following order', _this4.serverList);\n      } else {\n        _this4.logger.debug('Eureka cluster hosts unchanged, maintaining current server list.');\n      }\n      callback();\n    });\n  };\n\n  DnsClusterResolver.prototype.resolveClusterHosts = function resolveClusterHosts() {\n    var _this5 = this;\n\n    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;\n    var _config$eureka2 = this.config.eureka,\n        ec2Region = _config$eureka2.ec2Region,\n        host = _config$eureka2.host,\n        preferSameZone = _config$eureka2.preferSameZone;\n    var dataCenterInfo = this.config.instance.dataCenterInfo;\n\n    var metadata = dataCenterInfo ? dataCenterInfo.metadata : undefined;\n    var availabilityZone = metadata ? metadata['availability-zone'] : undefined;\n    var dnsHost = 'txt.' + ec2Region + '.' + host;\n    _dns2.default.resolveTxt(dnsHost, function (err, addresses) {\n      var _ref;\n\n      if (err) {\n        return callback(new Error('Error resolving eureka cluster for region [' + ec2Region + '] using DNS: [' + err + ']'));\n      }\n      var zoneRecords = (_ref = []).concat.apply(_ref, addresses);\n      var dnsTasks = {};\n      zoneRecords.forEach(function (zoneRecord) {\n        dnsTasks[zoneRecord] = function (cb) {\n          _this5.resolveZoneHosts('txt.' + zoneRecord, cb);\n        };\n      });\n      _async2.default.parallel(dnsTasks, function (error, results) {\n        if (error) return callback(error);\n        var hosts = [];\n        var myZoneHosts = [];\n        Object.keys(results).forEach(function (zone) {\n          if (preferSameZone && availabilityZone && zone.lastIndexOf(availabilityZone, 0) === 0) {\n            myZoneHosts.push.apply(myZoneHosts, results[zone]);\n          } else {\n            hosts.push.apply(hosts, results[zone]);\n          }\n        });\n        var combinedHosts = [].concat((0, _shuffle2.default)(myZoneHosts), (0, _shuffle2.default)(hosts));\n        if (!combinedHosts.length) {\n          return callback(new Error('Unable to locate any Eureka hosts in any zone via DNS @ ' + dnsHost));\n        }\n        callback(null, combinedHosts);\n      });\n    });\n  };\n\n  DnsClusterResolver.prototype.resolveZoneHosts = function resolveZoneHosts(zoneRecord, callback) {\n    var _this6 = this;\n\n    _dns2.default.resolveTxt(zoneRecord, function (err, results) {\n      var _ref2;\n\n      if (err) {\n        _this6.logger.warn('Failed to resolve cluster zone ' + zoneRecord, err.message);\n        return callback(new Error('Error resolving cluster zone ' + zoneRecord + ': [' + err + ']'));\n      }\n      _this6.logger.debug('Found Eureka Servers @ ' + zoneRecord, results);\n      callback(null, (_ref2 = []).concat.apply(_ref2, results).filter(function (value) {\n        return !!value;\n      }));\n    });\n  };\n\n  return DnsClusterResolver;\n}();\n\nexports.default = DnsClusterResolver;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}