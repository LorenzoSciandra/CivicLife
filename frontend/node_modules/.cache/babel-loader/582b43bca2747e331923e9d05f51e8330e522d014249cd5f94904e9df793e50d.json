{"ast":null,"code":"var _jsxFileName = \"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Data/PersonalData.tsx\",\n  _s = $RefreshSig$();\nimport { Button, Grid } from \"@mui/material\";\nimport '../App.css';\nimport React, { useEffect, useState } from \"react\";\nimport UpperButtonMenu from \"../Utils/UpperButtonMenu\";\nimport { useLocation } from \"react-router-dom\";\nimport { updateUser } from \"../APIs/UsersAPI\";\nimport AuthRequired from \"./AuthRequired\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PersonalData = () => {\n  _s();\n  const location = useLocation();\n  const user = location.state.user;\n  const tokenData = location.state.token;\n  const buttons = ['Dati', 'Vaccini', 'Bonus'];\n  const [dataList, setDataList] = useState([user.name, user.surname, user.email, user.birthDate, user.residence, user.domicile, user.telephoneNumber, user.status]);\n  const [vaxinesList, setvaxinesList] = useState([]);\n  const [bonusList, setBonusList] = useState([]);\n  const [showingList, setShowingList] = useState(dataList);\n  const [activeButton, setActiveButton] = useState(buttons[0]);\n  const [clickedVaxine, setClickedVaxine] = useState(null);\n  const [clickedBonus, setClickedBonus] = useState(null);\n  const [name, setName] = useState(user.name);\n  const [surname, setSurname] = useState(user.surname);\n  const [birthDate, setBirthDate] = useState(user.birthDate === 0 ? null : new Date(user.birthDate));\n  const email = user.email;\n  const [residence, setResidence] = useState(user.residence);\n  const [domicile, setDomicile] = useState(user.domicile);\n  const [telephonNumber, setTelephonNumber] = useState(user.telephonNumber);\n  const [fiscalCode, setFiscalCode] = useState(user.fiscalCode);\n  const [showVaxineDialog, setShowVaxineDialog] = useState(false);\n  const [showBonusDialog, setShowBonusDialog] = useState(false);\n  const [showBonusAuthorizationRequiredMessage, setShowBonusAuthorizationRequiredMessage] = useState(false);\n  const [showVaxineAuthorizationRequiredMessage, setShowVaxineAuthorizationRequiredMessage] = useState(false);\n  const handleNameChanged = event => {\n    setName(event.target.value);\n  };\n  const handleSurnameChanged = event => {\n    setSurname(event.target.value);\n  };\n  const handleBirthDateChanged = newValue => {\n    setBirthDate(newValue);\n  };\n  const handleResidenceChanged = event => {\n    setResidence(event.target.value);\n  };\n  const handleDomicileChanged = event => {\n    setDomicile(event.target.value);\n  };\n  const handleTelephoneNumberChanged = event => {\n    setTelephonNumber(parseInt(event.target.value));\n  };\n  const handleFiscalCodeChanged = event => {\n    setFiscalCode(event.target.value);\n  };\n  const loadBonuses = () => {\n    setShowingList(['Bonus 1', 'Bonus 2', 'Bonus 3']);\n    setShowBonusDialog(false);\n  };\n  const loadVaxines = () => {\n    setShowingList(['Vaxine 1', 'Vaxine 2', 'Vaxine 3']);\n    setShowVaxineDialog(false);\n    setShowBonusAuthorizationRequiredMessage(false);\n  };\n  const authVaxines = () => {\n    // const newUser : User ={\n    //     email: user.email,\n    //     name: user.name,\n    //     surname: user.surname,\n    //     admin: user.admin,\n    //     fiscalCode:user.fiscalCode,\n    //     residence:user.residence,\n    //     birthDate:Number(user.birthDate),\n    //     domicile:user.domicile,\n    //     status: user.status,\n    //     telephonNumber: Number(user.telephonNumber),\n    //     authorizeBonus: user.authorizeBonus,\n    //     authorizeVaxine: true\n    // }\n    console.log(\"authVaxines\");\n    const updateUserData = true; //updateUser(tokenData, newUser)\n    if (updateUserData) {\n      loadVaxines();\n    }\n  };\n  const authBonus = () => {\n    // const newUser : User ={\n    //     email: user.email,\n    //     name: user.name,\n    //     surname: user.surname,\n    //     admin: user.admin,\n    //     fiscalCode:user.fiscalCode,\n    //     residence:user.residence,\n    //     birthDate:Number(user.birthDate),\n    //     domicile:user.domicile,\n    //     status: user.status,\n    //     telephonNumber: Number(user.telephonNumber),\n    //     authorizeBonus: true,\n    //     authorizeVaxine: user.authorizeVaxine\n    // }\n    const updateUserData = true; //updateUser(tokenData, newUser)\n    if (updateUserData) {\n      loadBonuses();\n    }\n  };\n  useEffect(() => {\n    if (activeButton === buttons[0]) {\n      setShowBonusAuthorizationRequiredMessage(false);\n      setShowVaxineAuthorizationRequiredMessage(false);\n    } else if (activeButton === buttons[1]) {\n      setShowBonusAuthorizationRequiredMessage(false);\n      const authorized = false;\n      if (!authorized) {\n        setShowVaxineAuthorizationRequiredMessage(true);\n      } else {\n        loadVaxines();\n      }\n    } else if (activeButton === buttons[2]) {\n      setShowVaxineAuthorizationRequiredMessage(false);\n      const authorized = false;\n      if (!authorized) {\n        setShowBonusAuthorizationRequiredMessage(true);\n      } else {\n        loadBonuses();\n      }\n    }\n  }, [activeButton]);\n  const handleOperation = () => {\n    if (activeButton === buttons[0]) {\n      console.log('MODIFICO I DATI');\n      const newUser = {\n        email: email,\n        name: name,\n        surname: surname,\n        admin: user.admin,\n        fiscalCode: fiscalCode,\n        residence: residence,\n        birthDate: birthDate ? birthDate.getTime() : 0,\n        domicile: domicile,\n        status: user.status,\n        telephonNumber: Number(telephonNumber),\n        authorizeBonus: user.authorizeBonus,\n        authorizeVaxine: user.authorizeVaxine\n      };\n      updateUser(tokenData, newUser);\n    } else if (activeButton === buttons[1]) {\n      console.log('PRENDO I VACCINI');\n    } else if (activeButton === buttons[2]) {\n      console.log('PRENDO I BONUS');\n    }\n  };\n  const handleDialogOpen = data => {\n    console.log('APRO IL DIALOG');\n    if (activeButton === buttons[1]) {\n      setClickedVaxine(data);\n    } else if (activeButton === buttons[2]) {\n      setClickedBonus(data);\n    }\n  };\n  const handleDialogClose = () => {\n    console.log('CHIUDO IL DIALOG');\n    setClickedVaxine(null);\n    setClickedBonus(null);\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(UpperButtonMenu, {\n      first_label: buttons[0],\n      second_label: buttons[1],\n      third_label: buttons[2],\n      first_list: dataList,\n      second_list: vaxinesList,\n      third_list: bonusList,\n      listSetter: setShowingList,\n      buttonSetter: setActiveButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => console.log('clicco'),\n      children: \"Clicca qui\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AuthRequired, {\n      authFor: 'Bonus',\n      authFunction: authBonus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 9\n  }, this);\n};\n_s(PersonalData, \"JefrP+T08vBkQLniJMRBYINIKQ8=\", false, function () {\n  return [useLocation];\n});\n_c = PersonalData;\nexport default PersonalData;\nvar _c;\n$RefreshReg$(_c, \"PersonalData\");","map":{"version":3,"names":["Button","Grid","React","useEffect","useState","UpperButtonMenu","useLocation","updateUser","AuthRequired","PersonalData","location","user","state","tokenData","token","buttons","dataList","setDataList","name","surname","email","birthDate","residence","domicile","telephoneNumber","status","vaxinesList","setvaxinesList","bonusList","setBonusList","showingList","setShowingList","activeButton","setActiveButton","clickedVaxine","setClickedVaxine","clickedBonus","setClickedBonus","setName","setSurname","setBirthDate","Date","setResidence","setDomicile","telephonNumber","setTelephonNumber","fiscalCode","setFiscalCode","showVaxineDialog","setShowVaxineDialog","showBonusDialog","setShowBonusDialog","showBonusAuthorizationRequiredMessage","setShowBonusAuthorizationRequiredMessage","showVaxineAuthorizationRequiredMessage","setShowVaxineAuthorizationRequiredMessage","handleNameChanged","event","target","value","handleSurnameChanged","handleBirthDateChanged","newValue","handleResidenceChanged","handleDomicileChanged","handleTelephoneNumberChanged","parseInt","handleFiscalCodeChanged","loadBonuses","loadVaxines","authVaxines","console","log","updateUserData","authBonus","authorized","handleOperation","newUser","admin","getTime","Number","authorizeBonus","authorizeVaxine","handleDialogOpen","data","handleDialogClose"],"sources":["/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Data/PersonalData.tsx"],"sourcesContent":["import {Button, Dialog, Divider, Grid, ListItemText, Typography,} from \"@mui/material\";\nimport '../App.css'\nimport React, {useEffect, useState} from \"react\";\nimport List from '@mui/material/List';\nimport UpperButtonMenu from \"../Utils/UpperButtonMenu\";\nimport {CssTextField} from \"../Utils/CustomTextFields\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport {useLocation} from \"react-router-dom\";\nimport {AdapterDayjs} from \"@mui/x-date-pickers/AdapterDayjs\";\nimport {DatePicker, LocalizationProvider} from \"@mui/x-date-pickers\";\nimport type {User} from \"../APIs/UsersAPI\";\nimport {updateUser} from \"../APIs/UsersAPI\";\nimport AuthRequired from \"./AuthRequired\";\n\n\n\nconst PersonalData = () => {\n    const location = useLocation()\n    const user = location.state.user\n    const tokenData = location.state.token\n\n    const buttons = ['Dati', 'Vaccini', 'Bonus']\n    const [dataList, setDataList] = useState<any[]>([user.name, user.surname, user.email, user.birthDate, user.residence, user.domicile, user.telephoneNumber, user.status])\n    const [vaxinesList, setvaxinesList] = useState<any[]>([])\n    const [bonusList, setBonusList] = useState<any[]>([])\n    const [showingList, setShowingList] = useState<any[]>(dataList)\n    const [activeButton, setActiveButton] = useState(buttons[0]);\n    const [clickedVaxine, setClickedVaxine] = useState(null)\n    const [clickedBonus, setClickedBonus] = useState(null)\n    const [name, setName] = useState(user.name)\n    const [surname, setSurname] = useState(user.surname)\n    const [birthDate, setBirthDate] = useState<Date | null>(user.birthDate === 0 ? null : new Date(user.birthDate))\n    const email = user.email\n    const [residence, setResidence] = useState(user.residence)\n    const [domicile, setDomicile] = useState(user.domicile)\n    const [telephonNumber, setTelephonNumber] = useState(user.telephonNumber)\n    const [fiscalCode, setFiscalCode] = useState(user.fiscalCode)\n    const [showVaxineDialog, setShowVaxineDialog] = useState(false)\n    const [showBonusDialog, setShowBonusDialog] = useState(false)\n    const [showBonusAuthorizationRequiredMessage, setShowBonusAuthorizationRequiredMessage] = useState(false)\n    const [showVaxineAuthorizationRequiredMessage, setShowVaxineAuthorizationRequiredMessage] = useState(false)\n\n    const handleNameChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setName(event.target.value);\n    }\n    const handleSurnameChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSurname(event.target.value);\n    }\n    const handleBirthDateChanged = (newValue: Date | null) => {\n        setBirthDate(newValue);\n    }\n    const handleResidenceChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setResidence(event.target.value);\n    }\n    const handleDomicileChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setDomicile(event.target.value);\n    }\n    const handleTelephoneNumberChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setTelephonNumber(parseInt(event.target.value));\n    }\n    const handleFiscalCodeChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFiscalCode(event.target.value);\n    }\n    const loadBonuses = () => {\n        setShowingList(['Bonus 1', 'Bonus 2', 'Bonus 3'])\n        setShowBonusDialog(false)\n    }\n    const loadVaxines = () => {\n        setShowingList(['Vaxine 1', 'Vaxine 2', 'Vaxine 3'])\n        setShowVaxineDialog(false)\n        setShowBonusAuthorizationRequiredMessage(false)\n    }\n\n    const authVaxines = () => {\n        // const newUser : User ={\n        //     email: user.email,\n        //     name: user.name,\n        //     surname: user.surname,\n        //     admin: user.admin,\n        //     fiscalCode:user.fiscalCode,\n        //     residence:user.residence,\n        //     birthDate:Number(user.birthDate),\n        //     domicile:user.domicile,\n        //     status: user.status,\n        //     telephonNumber: Number(user.telephonNumber),\n        //     authorizeBonus: user.authorizeBonus,\n        //     authorizeVaxine: true\n        // }\n        console.log(\"authVaxines\")\n        const updateUserData = true//updateUser(tokenData, newUser)\n        if (updateUserData) {\n            loadVaxines()\n        }\n    }\n\n    const authBonus = () => {\n        // const newUser : User ={\n        //     email: user.email,\n        //     name: user.name,\n        //     surname: user.surname,\n        //     admin: user.admin,\n        //     fiscalCode:user.fiscalCode,\n        //     residence:user.residence,\n        //     birthDate:Number(user.birthDate),\n        //     domicile:user.domicile,\n        //     status: user.status,\n        //     telephonNumber: Number(user.telephonNumber),\n        //     authorizeBonus: true,\n        //     authorizeVaxine: user.authorizeVaxine\n        // }\n        const updateUserData = true //updateUser(tokenData, newUser)\n        if (updateUserData) {\n            loadBonuses()\n        }\n    }\n\n    useEffect(() => {\n        if (activeButton === buttons[0]) {\n            setShowBonusAuthorizationRequiredMessage(false)\n            setShowVaxineAuthorizationRequiredMessage(false)\n\n        }\n        else if (activeButton === buttons[1]) {\n            setShowBonusAuthorizationRequiredMessage(false)\n            const authorized = false;\n            if (!authorized) {\n                setShowVaxineAuthorizationRequiredMessage(true)\n            } else {\n                loadVaxines()\n            }\n        }\n        else if (activeButton === buttons[2]) {\n            setShowVaxineAuthorizationRequiredMessage(false)\n            const authorized = false;\n            if (!authorized) {\n                setShowBonusAuthorizationRequiredMessage(true)\n            } else {\n                loadBonuses()\n            }\n        }\n    }, [activeButton])\n\n\n    const handleOperation = () => {\n        if (activeButton === buttons[0]) {\n            console.log('MODIFICO I DATI')\n\n            const newUser: User = {\n                email: email,\n                name: name,\n                surname: surname,\n                admin: user.admin,\n                fiscalCode: fiscalCode,\n                residence: residence,\n                birthDate: birthDate ? birthDate.getTime() : 0,\n                domicile: domicile,\n                status: user.status,\n                telephonNumber: Number(telephonNumber),\n                authorizeBonus: user.authorizeBonus,\n                authorizeVaxine: user.authorizeVaxine,\n            }\n            updateUser(tokenData, newUser)\n        } else if (activeButton === buttons[1]) {\n            console.log('PRENDO I VACCINI')\n        } else if (activeButton === buttons[2]) {\n            console.log('PRENDO I BONUS')\n        }\n    }\n\n    const handleDialogOpen = (data: any) => {\n        console.log('APRO IL DIALOG')\n        if (activeButton === buttons[1]) {\n            setClickedVaxine(data)\n        } else if (activeButton === buttons[2]) {\n            setClickedBonus(data)\n        }\n    }\n\n    const handleDialogClose = () => {\n        console.log('CHIUDO IL DIALOG')\n        setClickedVaxine(null)\n        setClickedBonus(null)\n    }\n\n    return (\n        <Grid container direction=\"row\" spacing={2}>\n            <UpperButtonMenu first_label={buttons[0]} second_label={buttons[1]} third_label={buttons[2]}\n                             first_list={dataList} second_list={vaxinesList} third_list={bonusList}\n                             listSetter={setShowingList} buttonSetter={setActiveButton}/>\n            <Button variant=\"contained\" color=\"primary\" onClick={()=>console.log('clicco')}>Clicca qui</Button>\n            <AuthRequired authFor={'Bonus'} authFunction={authBonus}/>\n            {/*/!*{*!/*/}\n            {/*/!*    showBonusAuthorizationRequiredMessage ?*!/*/}\n            {/*/!*        <>*!/*/}\n            {/*/!*            <AuthRequired authFor={'Bonus'} authFunction={authBonus}/>*!/*/}\n            {/*/!*        </>*!/*/}\n            {/*/!*        : null*!/*/}\n            {/*/!*}*!/*/}\n            {/*/!*{*!/*/}\n            {/*/!*    showVaxineAuthorizationRequiredMessage ?*!/*/}\n            {/*/!*        <>*!/*/}\n            {/*/!*            <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">*!/*/}\n            {/*/!*                <Typography variant=\"h6\" align=\"center\"> Autorizzazione necessaria per accedere ai tuoi*!/*/}\n            {/*/!*                    vaccini, vuoi autorizzare ora?</Typography>*!/*/}\n            {/*/!*            </Grid>*!/*/}\n            {/*/!*            <Grid item xs={12} display=\"flex\" justifyContent='center' alignItems=\"right\">*!/*/}\n            {/*/!*                <Button style={{*!/*/}\n            {/*/!*                    borderRadius: 35,*!/*/}\n            {/*/!*                    backgroundColor: \"#92d36e\",*!/*/}\n            {/*/!*                    padding: \"10px 20px\",*!/*/}\n            {/*/!*                    fontSize: \"18px\"*!/*/}\n            {/*/!*                }}*!/*/}\n            {/*/!*                        variant=\"contained\"*!/*/}\n            {/*/!*                        onClick={() => {*!/*/}\n            {/*/!*                            handleOperation()*!/*/}\n            {/*/!*                        }}>*!/*/}\n            {/*/!*                    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB*!/*/}\n            {/*/!*                </Button>*!/*/}\n            {/*/!*            </Grid>*!/*/}\n            {/*/!*        </>*!/*/}\n            {/*/!*        : null*!/*/}\n            {/*/!*}*!/*/}\n            {/*<Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">*/}\n            {/*    <List sx={{*/}\n            {/*        width: '80%',*/}\n            {/*        overflow: 'auto',*/}\n            {/*        maxHeight: 595,*/}\n            {/*        position: 'fixed',*/}\n            {/*        top: 90,*/}\n            {/*        bottom: 100*/}\n            {/*    }}>*/}\n            {/*        {*/}\n            {/*            activeButton === buttons[0] ?*/}\n            {/*                <>*/}\n            {/*                    <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}*/}\n            {/*                                  label={'Nome'} defaultValue={name}/>*/}\n            {/*                    <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}*/}\n            {/*                                  label={'Cognome'} defaultValue={surname} onChange={handleSurnameChanged}/>*/}\n            {/*                    <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}*/}\n            {/*                                  label={'Email'} defaultValue={email} InputProps={{readOnly: true}}/>*/}\n            {/*                    <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}*/}\n            {/*                                  label={'Numero di telefono'} defaultValue={telephonNumber}*/}\n            {/*                                  onChange={handleTelephoneNumberChanged}/>*/}\n            {/*                    <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}*/}\n            {/*                                  label={'Codice fiscale'} defaultValue={fiscalCode}*/}\n            {/*                                  onChange={handleFiscalCodeChanged}/>*/}\n            {/*                    <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}*/}\n            {/*                                  label={'Residenza'} defaultValue={residence}*/}\n            {/*                                  onChange={handleResidenceChanged}/>*/}\n            {/*                    <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}*/}\n            {/*                                  label={'Domicilio'} defaultValue={domicile}*/}\n            {/*                                  onChange={handleDomicileChanged}/>*/}\n            {/*                    <LocalizationProvider dateAdapter={AdapterDayjs}>*/}\n            {/*                        <DatePicker*/}\n            {/*                            inputFormat=\"DD/MM/YYYY\"*/}\n            {/*                            label=\"Data inizio\"*/}\n            {/*                            value={birthDate}*/}\n            {/*                            renderInput={(params) => <CssTextField {...params} sx={{*/}\n            {/*                                input: {color: 'white'},*/}\n            {/*                                style: {color: 'white'},*/}\n            {/*                                marginTop: '9px'*/}\n            {/*                            }}/>}*/}\n            {/*                            onChange={(newValue) => {*/}\n            {/*                                handleBirthDateChanged(newValue);*/}\n            {/*                            }}/>*/}\n            {/*                    </LocalizationProvider>*/}\n            {/*                    <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}*/}\n            {/*                                  label={'Stato'} defaultValue={user.status} InputProps={{*/}\n            {/*                        readOnly: true,*/}\n            {/*                    }}/>*/}\n\n\n            {/*                </>*/}\n            {/*                :*/}\n            {/*                showingList.map((value, index) => {*/}\n            {/*                    return (*/}\n            {/*                        <>*/}\n            {/*                            <ListItemButton onClick={() => handleDialogOpen(value)}>*/}\n            {/*                                <ListItemText primary={value}/>*/}\n            {/*                            </ListItemButton>*/}\n            {/*                            <Divider color={'black'}/>*/}\n            {/*                        </>*/}\n            {/*                    );*/}\n            {/*                })}*/}\n            {/*    </List>*/}\n            {/*</Grid>*/}\n            {/*{*/}\n            {/*    (showBonusAuthorizationRequiredMessage || showVaxineAuthorizationRequiredMessage) ?*/}\n            {/*        null*/}\n            {/*        :*/}\n            {/*        <Grid item xs={12} display=\"flex\" justifyContent='center' alignItems=\"right\">*/}\n            {/*            <Button style={{*/}\n            {/*                position: 'fixed',*/}\n            {/*                bottom: 20,*/}\n            {/*                borderRadius: 35,*/}\n            {/*                backgroundColor: \"#92d36e\",*/}\n            {/*                padding: \"10px 20px\",*/}\n            {/*                fontSize: \"18px\"*/}\n            {/*            }}*/}\n            {/*                    variant=\"contained\"*/}\n            {/*                    onClick={() => {*/}\n            {/*                        handleOperation()*/}\n            {/*                    }}>*/}\n            {/*                {*/}\n            {/*                    activeButton === buttons[0] ? 'Salva' : activeButton === buttons[1] ? 'Aggiungi Vaccino' : 'aggiungi Bonus'*/}\n            {/*                }*/}\n            {/*            </Button>*/}\n            {/*        </Grid>*/}\n            {/*}*/}\n\n            {/*<Dialog maxWidth={\"sm\"} fullWidth={true} open={clickedVaxine !== null} onClose={handleDialogClose}>*/}\n            {/*    <DialogTitle>Dettagli vaccino</DialogTitle>*/}\n            {/*    <DialogContent>*/}\n            {/*        <DialogContentText>*/}\n            {/*            <ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                          primary={'Nome Vaccino'} secondary={'something'} onChange={handleNameChanged}/>*/}\n            {/*            <Divider/>*/}\n            {/*            <ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                          primary={'Tipo Vaccino'} secondary={'something'}/>*/}\n            {/*            <Divider/>*/}\n            {/*            <ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                          primary={'Data Somministrazione'} secondary={'something'}/>*/}\n            {/*            <Divider/><ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                                    primary={'Luogo Somministrazione'} secondary={'something'}/>*/}\n            {/*            <Divider/>*/}\n            {/*            <ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                          primary={'Descrizione Vaccino'} secondary={'something'}/>*/}\n            {/*            <Divider/>*/}\n            {/*            <ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                          primary={'Dettagli vaccino'} secondary={'something'}/>*/}\n            {/*            <Divider/>*/}\n            {/*            <ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                          primary={'Casa produttrice'} secondary={'something'}/>*/}\n            {/*            <Divider/>*/}\n            {/*            <ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                          primary={'Medico'} secondary={'something'}/>*/}\n            {/*            <Divider/>*/}\n            {/*            <ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                          primary={'Infermiere'} secondary={'something'}/>*/}\n            {/*        </DialogContentText>*/}\n            {/*    </DialogContent>*/}\n            {/*    <DialogActions>*/}\n            {/*        <Button onClick={handleDialogClose}>Chiudi</Button>*/}\n            {/*    </DialogActions>*/}\n            {/*</Dialog>*/}\n            {/*<Dialog maxWidth={\"sm\"} fullWidth={true} open={clickedBonus !== null} onClose={handleDialogClose}>*/}\n            {/*    <DialogTitle>Dettagli bonus</DialogTitle>*/}\n            {/*    <DialogContent>*/}\n            {/*        <DialogContentText>*/}\n            {/*            <ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                          primary={'Nome Bonus'} secondary={'something'}/>*/}\n            {/*            <Divider/>*/}\n            {/*            <ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                          primary={'Tipo Bonus'} secondary={'something'}/>*/}\n            {/*            <Divider/>*/}\n            {/*            <ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                          primary={'Data scadenza'} secondary={'something'}/>*/}\n            {/*            <Divider/>*/}\n            {/*            <ListItemText sx={{input: {color: 'white'}, style: {color: 'white'}}}*/}\n            {/*                          primary={'Descrizione'} secondary={'something'}/>*/}\n\n            {/*        </DialogContentText>*/}\n            {/*    </DialogContent>*/}\n            {/*    <DialogActions>*/}\n            {/*        <Button onClick={handleDialogClose}>Chiudi</Button>*/}\n            {/*    </DialogActions>*/}\n            {/*</Dialog>*/}\n        </Grid>\n    );\n}\n\nexport default PersonalData;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}