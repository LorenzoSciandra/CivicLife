{"ast":null,"code":"var _jsxFileName = \"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Data/PersonalData.tsx\",\n  _s = $RefreshSig$();\nimport { Button, Divider, Grid, ToggleButton, ToggleButtonGroup } from \"@mui/material\";\nimport '../App.css';\nimport React, { useState } from \"react\";\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport { CssTextField } from \"../Utils/CustomTextFields\";\nimport { Navigate, useLocation } from \"react-router-dom\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst activeButtonColor = {\n  background: '#feac0d',\n  color: '#ffffff'\n};\nconst inactiveButtonColor = {\n  background: '#ffffff',\n  color: '#feac0d'\n};\n\n// private String nome;\n// private String cognome;\n// private String email;\n// private String codicefiscale;\n// private String residenza;\n// private String domicilio;\n// private String data_nascita;\n// private int stato;\n// private long telefono;\n\nconst PersonalData = () => {\n  _s();\n  var _location$state, _location$state2;\n  const location = useLocation();\n  const buttons = ['Dati', 'Vaccini', 'Bonus'];\n  const labels = ['Nome', 'Cognome', 'Email', 'Codice fiscale', 'Residenza', 'Domicilio', 'Data di nascita', 'Stato', 'Telefono', 'dato10'];\n  const [dataList, setDataList] = useState(['Michele', 'Staffieri', 'michelestaf@gmail.com', 'STFMHL98R07F052Y', 'Via Agna, 12, Matera (MT) 75100, Italia', 'Via Agna, 12, Matera (MT) 75100, Italia', '7 ottobre 1998', 'ATTIVO', '3348405461']);\n  const [vaxinesList, setvaxinesList] = useState(['vaccino1', 'vaccino2', 'vaccino3', 'vaccino4']);\n  const [bonusList, setBonusList] = useState(['bonus1', 'bonus2']);\n  const [showingList, setShowingList] = useState(dataList);\n  const [activeButton, setActiveButton] = useState(buttons[0]);\n  const [firstButton, setFirstButton] = useState(activeButtonColor);\n  const [secondButton, setSecondButton] = useState(inactiveButtonColor);\n  const [thirdButton, setThirdButton] = useState(inactiveButtonColor);\n  const [selectedVaxine, setSelectedVaxine] = useState(null);\n  const [selectedBonus, setSelectedBonus] = useState(null);\n  const token = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.token;\n  const isAdmin = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.isAdmin;\n  if (token === undefined || isAdmin === undefined) {\n    console.log('non sei loggato');\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 16\n    }, this);\n  }\n  const handleOperation = () => {\n    if (activeButton === buttons[0]) {\n      console.log('MODIFICO I DATI');\n    } else if (activeButton === buttons[1]) {\n      console.log('PRENDO I VACCINI');\n    } else if (activeButton === buttons[2]) {\n      console.log('PRENDO I BONUS');\n    }\n  };\n  const handleChange = (event, newActiveButton) => {\n    if (newActiveButton === buttons[0]) {\n      setFirstButton(activeButtonColor);\n      setSecondButton(inactiveButtonColor);\n      setThirdButton(inactiveButtonColor);\n      setShowingList(dataList);\n    } else if (newActiveButton === buttons[1]) {\n      setFirstButton(inactiveButtonColor);\n      setSecondButton(activeButtonColor);\n      setThirdButton(inactiveButtonColor);\n      setShowingList(vaxinesList);\n    } else if (newActiveButton === buttons[2]) {\n      setFirstButton(inactiveButtonColor);\n      setSecondButton(inactiveButtonColor);\n      setThirdButton(activeButtonColor);\n      setShowingList(bonusList);\n    }\n    setActiveButton(newActiveButton);\n  };\n  const handleClick = data => {\n    if (activeButton === buttons[1]) {\n      setSelectedVaxine(data);\n    } else if (activeButton === buttons[2]) {\n      setSelectedBonus(data);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n          value: activeButton,\n          exclusive: true,\n          onChange: handleChange,\n          \"aria-label\": \"Platform\",\n          sx: {\n            position: 'fixed',\n            top: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n            style: {\n              backgroundColor: firstButton.background,\n              color: firstButton.color,\n              borderColor: '#000000',\n              fontSize: '25px'\n            },\n            value: buttons[0],\n            children: buttons[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            style: {\n              backgroundColor: secondButton.background,\n              color: secondButton.color,\n              borderColor: '#000000',\n              fontSize: '25px'\n            },\n            value: buttons[1],\n            children: buttons[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            style: {\n              backgroundColor: thirdButton.background,\n              color: thirdButton.color,\n              borderColor: '#000000',\n              fontSize: '25px'\n            },\n            value: buttons[2],\n            children: buttons[2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        display: \"flex\",\n        justifyContent: \"center\",\n        sx: {\n          marginTop: '55px'\n        },\n        children: /*#__PURE__*/_jsxDEV(List, {\n          sx: {\n            width: '90%',\n            position: 'relative',\n            overflow: 'auto',\n            maxHeight: 660\n          },\n          children: showingList.map((value, index) => {\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                children: activeButton === buttons[0] ? /*#__PURE__*/_jsxDEV(CssTextField, {\n                  sx: {\n                    input: {\n                      color: 'white'\n                    },\n                    style: {\n                      color: 'white'\n                    }\n                  },\n                  label: value,\n                  placeholder: labels[index]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 45\n                }, this) :\n                /*#__PURE__*/\n                // <ReadOnlyTextField\n                //     sx={{input: {color: 'white'}, style: {color: 'white'}}}\n                //     label={value}\n                //     placeholder={labels[index]}\n                //     InputProps={{\n                //         readOnly: true,\n                //     }}/>\n                _jsxDEV(ListItemButton, {\n                  onClick: () => handleClick(value),\n                  children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: value\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 45\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        display: \"flex\",\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            borderRadius: 100,\n            backgroundColor: \"#92d36e\",\n            padding: \"10px 20px\",\n            fontSize: \"18px\"\n          },\n          variant: \"contained\",\n          onClick: () => {\n            handleOperation();\n          },\n          children: activeButton === buttons[0] ? 'Salva' : activeButton === buttons[1] ? 'Aggiungi Vaccino' : 'aggiungi Bonus'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), selectedVaxine ? /*#__PURE__*/_jsxDEV(Dialog, {\n        fullWidth: true,\n        open: selectedVaxine,\n        onClose: () => setSelectedVaxine(null),\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: selectedVaxine\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n            children: [\"mostro tutti i dati di \", selectedVaxine]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setSelectedVaxine(null),\n            children: \"Chiudi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 25\n      }, this) : null, selectedBonus ? /*#__PURE__*/_jsxDEV(Dialog, {\n        fullWidth: true,\n        open: selectedBonus,\n        onClose: () => setSelectedBonus(null),\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: selectedBonus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n            children: [\"mostro tutti i dati di \", selectedBonus, /*#__PURE__*/_jsxDEV(List, {\n              children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: 'nome bonus: '\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: 'tipologia bonus: '\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setSelectedBonus(null),\n            children: \"Chiudi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 25\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(PersonalData, \"hwLBnwwork2FgASMXmUCAWF46xo=\", false, function () {\n  return [useLocation];\n});\n_c = PersonalData;\nexport default PersonalData;\nvar _c;\n$RefreshReg$(_c, \"PersonalData\");","map":{"version":3,"names":["Button","Divider","Grid","ToggleButton","ToggleButtonGroup","React","useState","List","ListItem","CssTextField","Navigate","useLocation","ListItemText","ListItemButton","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","activeButtonColor","background","color","inactiveButtonColor","PersonalData","location","buttons","labels","dataList","setDataList","vaxinesList","setvaxinesList","bonusList","setBonusList","showingList","setShowingList","activeButton","setActiveButton","firstButton","setFirstButton","secondButton","setSecondButton","thirdButton","setThirdButton","selectedVaxine","setSelectedVaxine","selectedBonus","setSelectedBonus","token","state","isAdmin","undefined","console","log","handleOperation","handleChange","event","newActiveButton","handleClick","data","position","top","backgroundColor","borderColor","fontSize","marginTop","width","overflow","maxHeight","map","value","index","input","style","borderRadius","padding"],"sources":["/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Data/PersonalData.tsx"],"sourcesContent":["import {Button, Divider, Grid, ToggleButton, ToggleButtonGroup,} from \"@mui/material\";\nimport '../App.css'\nimport React, {useState} from \"react\";\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport {CssTextField} from \"../Utils/CustomTextFields\";\nimport {Navigate, useLocation} from \"react-router-dom\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogActions from \"@mui/material/DialogActions\";\n\ntype ButtonStyleType = {\n    background: string,\n    color: string\n}\n\nconst activeButtonColor: ButtonStyleType = {\n    background: '#feac0d',\n    color: '#ffffff'\n}\n\nconst inactiveButtonColor: ButtonStyleType = {\n    background: '#ffffff',\n    color: '#feac0d'\n}\n\n// private String nome;\n// private String cognome;\n// private String email;\n// private String codicefiscale;\n// private String residenza;\n// private String domicilio;\n// private String data_nascita;\n// private int stato;\n// private long telefono;\n\nconst PersonalData = () => {\n    const location = useLocation()\n    const buttons = ['Dati', 'Vaccini', 'Bonus']\n    const labels = ['Nome', 'Cognome', 'Email', 'Codice fiscale', 'Residenza', 'Domicilio', 'Data di nascita', 'Stato', 'Telefono', 'dato10']\n    const [dataList, setDataList] = useState<any[]>(['Michele', 'Staffieri', 'michelestaf@gmail.com', 'STFMHL98R07F052Y', 'Via Agna, 12, Matera (MT) 75100, Italia', 'Via Agna, 12, Matera (MT) 75100, Italia', '7 ottobre 1998', 'ATTIVO', '3348405461'])\n    const [vaxinesList, setvaxinesList] = useState<any[]>(['vaccino1', 'vaccino2', 'vaccino3', 'vaccino4'])\n    const [bonusList, setBonusList] = useState<any[]>(['bonus1', 'bonus2'])\n    const [showingList, setShowingList] = useState<any[]>(dataList)\n    const [activeButton, setActiveButton] = useState<String>(buttons[0]);\n    const [firstButton, setFirstButton] = useState<ButtonStyleType>(activeButtonColor)\n    const [secondButton, setSecondButton] = useState<ButtonStyleType>(inactiveButtonColor)\n    const [thirdButton, setThirdButton] = useState<ButtonStyleType>(inactiveButtonColor)\n    const [selectedVaxine, setSelectedVaxine] = useState(null)\n    const [selectedBonus, setSelectedBonus] = useState(null)\n\n    const token = location.state?.token\n    const isAdmin = location.state?.isAdmin\n    if (token === undefined || isAdmin === undefined) {\n        console.log('non sei loggato')\n        return <Navigate to='/'/>\n    }\n\n    const handleOperation = () => {\n        if (activeButton === buttons[0]) {\n            console.log('MODIFICO I DATI')\n        } else if (activeButton === buttons[1]) {\n            console.log('PRENDO I VACCINI')\n        } else if (activeButton === buttons[2]) {\n            console.log('PRENDO I BONUS')\n        }\n    }\n\n    const handleChange = (event: React.MouseEvent<HTMLElement>, newActiveButton: string,) => {\n        if (newActiveButton === buttons[0]) {\n            setFirstButton(activeButtonColor)\n            setSecondButton(inactiveButtonColor)\n            setThirdButton(inactiveButtonColor)\n            setShowingList(dataList)\n        } else if (newActiveButton === buttons[1]) {\n            setFirstButton(inactiveButtonColor)\n            setSecondButton(activeButtonColor)\n            setThirdButton(inactiveButtonColor)\n            setShowingList(vaxinesList)\n        } else if (newActiveButton === buttons[2]) {\n            setFirstButton(inactiveButtonColor)\n            setSecondButton(inactiveButtonColor)\n            setThirdButton(activeButtonColor)\n            setShowingList(bonusList)\n        }\n        setActiveButton(newActiveButton)\n    }\n\n    const handleClick = (data: any) => {\n        if (activeButton === buttons[1]) {\n            setSelectedVaxine(data)\n        } else if (activeButton === buttons[2]) {\n            setSelectedBonus(data)\n        }\n    }\n\n    return (\n        <>\n            <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <ToggleButtonGroup value={activeButton} exclusive onChange={handleChange} aria-label=\"Platform\"\n                                       sx={{position: 'fixed', top: 5}}>\n                        <ToggleButton style={{\n                            backgroundColor: firstButton.background,\n                            color: firstButton.color,\n                            borderColor: '#000000',\n                            fontSize: '25px'\n                        }} value={buttons[0]}>{buttons[0]}</ToggleButton>\n                        <ToggleButton style={{\n                            backgroundColor: secondButton.background,\n                            color: secondButton.color,\n                            borderColor: '#000000',\n                            fontSize: '25px'\n                        }} value={buttons[1]}>{buttons[1]}</ToggleButton>\n                        <ToggleButton style={{\n                            backgroundColor: thirdButton.background,\n                            color: thirdButton.color,\n                            borderColor: '#000000',\n                            fontSize: '25px'\n                        }} value={buttons[2]}>{buttons[2]}</ToggleButton>\n                    </ToggleButtonGroup>\n                </Grid>\n\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" sx={{marginTop: '55px'}}>\n                    <List sx={{\n                        width: '90%',\n                        position: 'relative',\n                        overflow: 'auto',\n                        maxHeight: 660,\n                    }}>\n                        {showingList.map((value, index) => {\n                            return (\n                                <>\n                                    <ListItem key={index}>\n                                        {activeButton === buttons[0] ?\n                                            <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}}}\n                                                          label={value}\n                                                          placeholder={labels[index]}/>\n                                            :\n                                            // <ReadOnlyTextField\n                                            //     sx={{input: {color: 'white'}, style: {color: 'white'}}}\n                                            //     label={value}\n                                            //     placeholder={labels[index]}\n                                            //     InputProps={{\n                                            //         readOnly: true,\n                                            //     }}/>\n                                            <ListItemButton onClick={() => handleClick(value)}>\n                                                <ListItemText primary={value}/>\n                                            </ListItemButton>}\n                                    </ListItem>\n                                    <Divider/>\n                                </>\n                            );\n                        })}\n\n                    </List>\n                </Grid>\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\">\n                    <Button style={{\n                        borderRadius: 100,\n                        backgroundColor: \"#92d36e\",\n                        padding: \"10px 20px\",\n                        fontSize: \"18px\"\n                    }}\n                            variant=\"contained\"\n                            onClick={() => {\n                                handleOperation();\n                            }}>\n                        {activeButton === buttons[0] ? 'Salva' : activeButton === buttons[1] ? 'Aggiungi Vaccino' : 'aggiungi Bonus'}\n                    </Button>\n                </Grid>\n                {\n                    selectedVaxine ?\n                        <Dialog fullWidth={true} open={selectedVaxine} onClose={() => setSelectedVaxine(null)}>\n                            <DialogTitle>{selectedVaxine}</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    mostro tutti i dati di {selectedVaxine}\n                                </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={() => setSelectedVaxine(null)}>Chiudi</Button>\n                            </DialogActions>\n                        </Dialog> : null\n                }\n                {\n                    selectedBonus ?\n                        <Dialog fullWidth={true} open={selectedBonus} onClose={() => setSelectedBonus(null)}>\n                            <DialogTitle>{selectedBonus}</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    mostro tutti i dati di {selectedBonus}\n                                    <List >\n                                            <ListItemText primary={'nome bonus: '}/>\n                                            <ListItemText primary={'tipologia bonus: '}/>\n                                            {/*<ListItemText primary={'descrizione bonus: '+ 'orem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur quis interdum augue, et euismod lectus. Ut ac ultricies augue. Praesent in ornare elit, a pellentesque libero. Nam euismod mi nec tortor elementum aliquet. Curabitur'}/>*/}\n                                            {/*<ListItemText primary={'scadenza bonus: '}/>*/}\n                                        <Divider/>\n                                    </List>\n                                </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={() => setSelectedBonus(null)}>Chiudi</Button>\n                            </DialogActions>\n                        </Dialog> : null\n                }\n            </Grid>\n        </>\n    );\n}\n\nexport default PersonalData;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}