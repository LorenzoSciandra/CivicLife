{"ast":null,"code":"var _jsxFileName = \"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Utils/UpperButtonMenu.tsx\",\n  _s = $RefreshSig$();\nimport { Grid, ToggleButton, ToggleButtonGroup } from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpperButtonMenu = props => {\n  _s();\n  const activeButtonColor = {\n    background: '#feac0d',\n    color: '#ffffff'\n  };\n  const inactiveButtonColor = {\n    background: '#ffffff',\n    color: '#feac0d'\n  };\n  const activeButton = useState(props.first_label);\n  const [firstButton, setFirstButton] = useState(activeButtonColor);\n  const [secondButton, setSecondButton] = useState(inactiveButtonColor);\n  const [thirdButton, setThirdButton] = useState(inactiveButtonColor);\n  const handleChange = (event, newActiveButton) => {\n    if (newActiveButton === props.first_label) {\n      setFirstButton(activeButtonColor);\n      setSecondButton(inactiveButtonColor);\n      setThirdButton(inactiveButtonColor);\n      props.listSetter(props.first_list);\n    } else if (newActiveButton === props.second_label) {\n      setFirstButton(inactiveButtonColor);\n      setSecondButton(activeButtonColor);\n      setThirdButton(inactiveButtonColor);\n      props.listSetter(props.second_list);\n    } else if (props.third_list !== null) {\n      if (newActiveButton === props.third_label) {\n        setFirstButton(inactiveButtonColor);\n        setSecondButton(inactiveButtonColor);\n        setThirdButton(activeButtonColor);\n        props.listSetter(props.third_list);\n      }\n    }\n    if (props.buttonSetter) props.buttonSetter(newActiveButton);\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    xs: 12,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    sx: {\n      width: '100%',\n      position: 'fixed',\n      top: 10\n    },\n    children: /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n      value: activeButton,\n      exclusive: true,\n      onChange: handleChange,\n      \"aria-label\": \"Platform\",\n      children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n        style: {\n          backgroundColor: firstButton.background,\n          color: firstButton.color,\n          borderColor: '#000000',\n          fontSize: '25px'\n        },\n        value: props.first_label,\n        children: props.first_label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n        style: {\n          backgroundColor: secondButton.background,\n          color: secondButton.color,\n          borderColor: '#000000',\n          fontSize: '25px'\n        },\n        value: props.second_label,\n        children: props.second_label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), props.third_list && props.third_label ? /*#__PURE__*/_jsxDEV(ToggleButton, {\n        style: {\n          backgroundColor: thirdButton.background,\n          color: thirdButton.color,\n          borderColor: '#000000',\n          fontSize: '25px'\n        },\n        value: props.third_label,\n        children: props.third_label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 63\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 13\n  }, this);\n};\n_s(UpperButtonMenu, \"W799qNHQkqQnySF0JVMEBU71/fA=\");\n_c = UpperButtonMenu;\nexport default UpperButtonMenu;\nvar _c;\n$RefreshReg$(_c, \"UpperButtonMenu\");","map":{"version":3,"names":["Grid","ToggleButton","ToggleButtonGroup","React","useState","UpperButtonMenu","props","activeButtonColor","background","color","inactiveButtonColor","activeButton","first_label","firstButton","setFirstButton","secondButton","setSecondButton","thirdButton","setThirdButton","handleChange","event","newActiveButton","listSetter","first_list","second_label","second_list","third_list","third_label","buttonSetter","width","position","top","backgroundColor","borderColor","fontSize"],"sources":["/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Utils/UpperButtonMenu.tsx"],"sourcesContent":["import {Grid, IconButton, ToggleButton, ToggleButtonGroup} from \"@mui/material\";\nimport React, {useState} from \"react\";\nimport KeyboardBackspaceIcon from \"@mui/icons-material/KeyboardBackspace\";\n\ntype UpperButtonsMenupropsType={\n    first_label:string,\n    second_label:string,\n    third_label:string | null,\n    first_list: any[],\n    second_list: any[],\n    third_list:any[]| null,\n    listSetter:any,\n    buttonSetter:any|null\n}\n\nconst UpperButtonMenu = (props: UpperButtonsMenupropsType) => {\n\n    type ButtonStyleType = {\n        background: string,\n        color: string\n    }\n    const activeButtonColor: ButtonStyleType = {\n        background: '#feac0d',\n        color: '#ffffff'\n    }\n    const inactiveButtonColor: ButtonStyleType = {\n        background: '#ffffff',\n        color: '#feac0d'\n    }\n    const activeButton = useState(props.first_label);\n    const [firstButton, setFirstButton] = useState<ButtonStyleType>(activeButtonColor)\n    const [secondButton, setSecondButton] = useState<ButtonStyleType>(inactiveButtonColor)\n    const [thirdButton, setThirdButton] = useState<ButtonStyleType>(inactiveButtonColor)\n\n    const handleChange = (event: React.MouseEvent<HTMLElement>, newActiveButton: string,) => {\n        if (newActiveButton === props.first_label) {\n            setFirstButton(activeButtonColor)\n            setSecondButton(inactiveButtonColor)\n            setThirdButton(inactiveButtonColor)\n            props.listSetter(props.first_list)\n        } else if (newActiveButton === props.second_label) {\n            setFirstButton(inactiveButtonColor)\n            setSecondButton(activeButtonColor)\n            setThirdButton(inactiveButtonColor)\n            props.listSetter(props.second_list)\n        } else if(props.third_list!==null) {\n            if (newActiveButton === props.third_label) {\n                setFirstButton(inactiveButtonColor)\n                setSecondButton(inactiveButtonColor)\n                setThirdButton(activeButtonColor)\n                props.listSetter(props.third_list)\n            }\n        }\n        if(props.buttonSetter) props.buttonSetter(newActiveButton)\n    };\n\n    return (\n            <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" sx={{width: '100%',\n                position: 'fixed',\n                top: 10}}>\n                <ToggleButtonGroup value={activeButton} exclusive onChange={handleChange} aria-label=\"Platform\">\n                    <ToggleButton style={{\n                        backgroundColor: firstButton.background,\n                        color: firstButton.color,\n                        borderColor: '#000000',\n                        fontSize: '25px'\n                    }} value={props.first_label}>{props.first_label}</ToggleButton>\n                    <ToggleButton style={{\n                        backgroundColor: secondButton.background,\n                        color: secondButton.color,\n                        borderColor: '#000000',\n                        fontSize: '25px'\n                    }} value={props.second_label}>{props.second_label}</ToggleButton>\n                    {\n                        props.third_list && props.third_label?<ToggleButton style={{\n                            backgroundColor: thirdButton.background,\n                            color: thirdButton.color,\n                            borderColor: '#000000',\n                            fontSize: '25px'\n                        }} value={props.third_label}>{props.third_label}</ToggleButton>\n                            :\n                            null\n                    }\n\n                </ToggleButtonGroup>\n            </Grid>\n    );\n}\n\nexport default UpperButtonMenu;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}