{"ast":null,"code":"import axios from 'axios';\nimport { Base64 } from \"js-base64\";\nexport let ValidateCode;\n(function (ValidateCode) {\n  ValidateCode[ValidateCode[\"ACTIVE\"] = 0] = \"ACTIVE\";\n  ValidateCode[ValidateCode[\"EXPIRED\"] = 1] = \"EXPIRED\";\n  ValidateCode[ValidateCode[\"INVALID_EMAIL\"] = 2] = \"INVALID_EMAIL\";\n  ValidateCode[ValidateCode[\"INVALID_TOKEN\"] = 3] = \"INVALID_TOKEN\";\n  ValidateCode[ValidateCode[\"INVALID_PROVIDER\"] = 4] = \"INVALID_PROVIDER\";\n  ValidateCode[ValidateCode[\"INCOMPLETE_CREDENTIALS\"] = 5] = \"INCOMPLETE_CREDENTIALS\";\n  ValidateCode[ValidateCode[\"AUTH_SERVER_ERROR\"] = 6] = \"AUTH_SERVER_ERROR\";\n})(ValidateCode || (ValidateCode = {}));\nexport const exchangeToken = async token => {\n  console.log('qui ho questo', token);\n  let url = 'http://localhost:8080/authAPI/v1/token/' + token;\n  return await axios.get(url).then(response => {\n    const data = Base64.decode(response.data);\n    const values = data.split(\",\");\n    console.log('values trovati', values);\n    for (let i = 0; i < values.length; i++) {\n      values[i] = values[i].split(\": \")[1];\n    }\n    return {\n      email: values[0],\n      provider: values[1],\n      token: values[2]\n    };\n  }).catch(function (error) {\n    console.log(error);\n    return null;\n  });\n};","map":{"version":3,"names":["axios","Base64","ValidateCode","exchangeToken","token","console","log","url","get","then","response","data","decode","values","split","i","length","email","provider","catch","error"],"sources":["/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/APIs/OauthAPI.ts"],"sourcesContent":["import axios from 'axios';\nimport {Base64} from \"js-base64\";\n\nexport type TokenData= {\n    email:string,\n    provider:string,\n    token:string,\n}\n\nexport enum ValidateCode{\n    ACTIVE, EXPIRED, INVALID_EMAIL, INVALID_TOKEN, INVALID_PROVIDER, INCOMPLETE_CREDENTIALS, AUTH_SERVER_ERROR\n}\n\nexport type AuthError={\n    code: ValidateCode,\n    method: string,\n    requestedPath: string\n}\n\nexport const exchangeToken = async (token: string)=> {\n    console.log('qui ho questo',token)\n    let url = 'http://localhost:8080/authAPI/v1/token/'+ token\n    return await axios.get(url).then((response) => {\n        const data = Base64.decode(response.data);\n        const values = data.split(\",\")\n        console.log('values trovati',values)\n        for(let i = 0; i < values.length; i++){\n            values[i] = values[i].split(\": \")[1]\n        }\n        return{\n            email: values[0],\n            provider: values[1],\n            token: values[2],\n        }\n    }).catch(function(error) {\n        console.log(error)\n        return null\n    });\n}\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,MAAM,QAAO,WAAW;AAQhC,WAAYC,YAAY;AAEvB,WAFWA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;AAAA,GAAZA,YAAY,KAAZA,YAAY;AAUxB,OAAO,MAAMC,aAAa,GAAG,MAAOC,KAAa,IAAI;EACjDC,OAAO,CAACC,GAAG,CAAC,eAAe,EAACF,KAAK,CAAC;EAClC,IAAIG,GAAG,GAAG,yCAAyC,GAAEH,KAAK;EAC1D,OAAO,MAAMJ,KAAK,CAACQ,GAAG,CAACD,GAAG,CAAC,CAACE,IAAI,CAAEC,QAAQ,IAAK;IAC3C,MAAMC,IAAI,GAAGV,MAAM,CAACW,MAAM,CAACF,QAAQ,CAACC,IAAI,CAAC;IACzC,MAAME,MAAM,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;IAC9BT,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAACO,MAAM,CAAC;IACpC,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACG,MAAM,EAAED,CAAC,EAAE,EAAC;MAClCF,MAAM,CAACE,CAAC,CAAC,GAAGF,MAAM,CAACE,CAAC,CAAC,CAACD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACxC;IACA,OAAM;MACFG,KAAK,EAAEJ,MAAM,CAAC,CAAC,CAAC;MAChBK,QAAQ,EAAEL,MAAM,CAAC,CAAC,CAAC;MACnBT,KAAK,EAAES,MAAM,CAAC,CAAC;IACnB,CAAC;EACL,CAAC,CAAC,CAACM,KAAK,CAAC,UAASC,KAAK,EAAE;IACrBf,OAAO,CAACC,GAAG,CAACc,KAAK,CAAC;IAClB,OAAO,IAAI;EACf,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}