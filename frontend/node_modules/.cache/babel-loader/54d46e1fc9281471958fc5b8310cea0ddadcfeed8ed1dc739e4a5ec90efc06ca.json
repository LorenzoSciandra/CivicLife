{"ast":null,"code":"import { JSEncrypt } from 'jsencrypt';\nfunction decrypt() {\n  let encrypt = new JSEncrypt();\n  var publicKey = `\n    -----BEGIN PUBLIC KEY-----\n    MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDlOJu6TyygqxfWT7eLtGDwajtN\n    FOb9I5XRb6khyfD1Yt3YiCgQWMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76\n    xFxdU6jE0NQ+Z+zEdhUTooNRaY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4\n    gwQco1KRMDSmXSMkDwIDAQAB\n    -----END PUBLIC KEY-----`;\n\n  // Copied from https://github.com/travist/jsencrypt\n  var privateKey = `\n    -----BEGIN RSA PRIVATE KEY-----\n    MIICXQIBAAKBgQDlOJu6TyygqxfWT7eLtGDwajtNFOb9I5XRb6khyfD1Yt3YiCgQ\n    WMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76xFxdU6jE0NQ+Z+zEdhUTooNR\n    aY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4gwQco1KRMDSmXSMkDwIDAQAB\n    AoGAfY9LpnuWK5Bs50UVep5c93SJdUi82u7yMx4iHFMc/Z2hfenfYEzu+57fI4fv\n    xTQ//5DbzRR/XKb8ulNv6+CHyPF31xk7YOBfkGI8qjLoq06V+FyBfDSwL8KbLyeH\n    m7KUZnLNQbk8yGLzB3iYKkRHlmUanQGaNMIJziWOkN+N9dECQQD0ONYRNZeuM8zd\n    8XJTSdcIX4a3gy3GGCJxOzv16XHxD03GW6UNLmfPwenKu+cdrQeaqEixrCejXdAF\n    z/7+BSMpAkEA8EaSOeP5Xr3ZrbiKzi6TGMwHMvC7HdJxaBJbVRfApFrE0/mPwmP5\n    rN7QwjrMY+0+AbXcm8mRQyQ1+IGEembsdwJBAN6az8Rv7QnD/YBvi52POIlRSSIM\n    V7SwWvSK4WSMnGb1ZBbhgdg57DXaspcwHsFV7hByQ5BvMtIduHcT14ECfcECQATe\n    aTgjFnqE/lQ22Rk0eGaYO80cc643BXVGafNfd9fcvwBMnk0iGX0XRsOozVt5Azil\n    psLBYuApa66NcVHJpCECQQDTjI2AQhFc1yRnCU/YgDnSpJVm1nASoRUnU8Jfm3Oz\n    uku7JUXcVpt08DFSceCEX9unCuMcT72rAQlLpdZir876\n    -----END RSA PRIVATE KEY-----`;\n\n  // Assign our encryptor to utilize the public key.\n  encrypt.setPublicKey(publicKey);\n\n  // Perform our encryption based on our public key - only private key can read it!\n  var encrypted = encrypt.encrypt(\"Hello world!\");\n\n  // Decrypt with the private key...\n  var decrypt = new JSEncrypt();\n  decrypt.setPrivateKey(privateKey);\n  var uncrypted = decrypt.decrypt(encrypted);\n  console.log(uncrypted); // => 'Hello world!'\n  console.log(encrypted); // => 'U2FsdGVkX1+...'\n}\n\nexport default decrypt;","map":{"version":3,"names":["JSEncrypt","decrypt","encrypt","publicKey","privateKey","setPublicKey","encrypted","setPrivateKey","uncrypted","console","log"],"sources":["/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Decrypt.js"],"sourcesContent":["\nimport { JSEncrypt } from 'jsencrypt';\n\nfunction decrypt(){\n    let encrypt = new JSEncrypt();\n    var publicKey = `\n    -----BEGIN PUBLIC KEY-----\n    MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDlOJu6TyygqxfWT7eLtGDwajtN\n    FOb9I5XRb6khyfD1Yt3YiCgQWMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76\n    xFxdU6jE0NQ+Z+zEdhUTooNRaY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4\n    gwQco1KRMDSmXSMkDwIDAQAB\n    -----END PUBLIC KEY-----`;\n\n    // Copied from https://github.com/travist/jsencrypt\n    var privateKey = `\n    -----BEGIN RSA PRIVATE KEY-----\n    MIICXQIBAAKBgQDlOJu6TyygqxfWT7eLtGDwajtNFOb9I5XRb6khyfD1Yt3YiCgQ\n    WMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76xFxdU6jE0NQ+Z+zEdhUTooNR\n    aY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4gwQco1KRMDSmXSMkDwIDAQAB\n    AoGAfY9LpnuWK5Bs50UVep5c93SJdUi82u7yMx4iHFMc/Z2hfenfYEzu+57fI4fv\n    xTQ//5DbzRR/XKb8ulNv6+CHyPF31xk7YOBfkGI8qjLoq06V+FyBfDSwL8KbLyeH\n    m7KUZnLNQbk8yGLzB3iYKkRHlmUanQGaNMIJziWOkN+N9dECQQD0ONYRNZeuM8zd\n    8XJTSdcIX4a3gy3GGCJxOzv16XHxD03GW6UNLmfPwenKu+cdrQeaqEixrCejXdAF\n    z/7+BSMpAkEA8EaSOeP5Xr3ZrbiKzi6TGMwHMvC7HdJxaBJbVRfApFrE0/mPwmP5\n    rN7QwjrMY+0+AbXcm8mRQyQ1+IGEembsdwJBAN6az8Rv7QnD/YBvi52POIlRSSIM\n    V7SwWvSK4WSMnGb1ZBbhgdg57DXaspcwHsFV7hByQ5BvMtIduHcT14ECfcECQATe\n    aTgjFnqE/lQ22Rk0eGaYO80cc643BXVGafNfd9fcvwBMnk0iGX0XRsOozVt5Azil\n    psLBYuApa66NcVHJpCECQQDTjI2AQhFc1yRnCU/YgDnSpJVm1nASoRUnU8Jfm3Oz\n    uku7JUXcVpt08DFSceCEX9unCuMcT72rAQlLpdZir876\n    -----END RSA PRIVATE KEY-----`\n\n    // Assign our encryptor to utilize the public key.\n    encrypt.setPublicKey(publicKey);\n\n    // Perform our encryption based on our public key - only private key can read it!\n    var encrypted = encrypt.encrypt(\"Hello world!\");\n\n    // Decrypt with the private key...\n    var decrypt = new JSEncrypt();\n    decrypt.setPrivateKey(privateKey);\n    var uncrypted = decrypt.decrypt(encrypted);\n\n    console.log(uncrypted); // => 'Hello world!'\n    console.log(encrypted); // => 'U2FsdGVkX1+...'\n\n}\n\nexport default decrypt;\n\n\n"],"mappings":"AACA,SAASA,SAAS,QAAQ,WAAW;AAErC,SAASC,OAAO,GAAE;EACd,IAAIC,OAAO,GAAG,IAAIF,SAAS,EAAE;EAC7B,IAAIG,SAAS,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;;EAEzB;EACA,IAAIC,UAAU,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;EAE9B;EACAF,OAAO,CAACG,YAAY,CAACF,SAAS,CAAC;;EAE/B;EACA,IAAIG,SAAS,GAAGJ,OAAO,CAACA,OAAO,CAAC,cAAc,CAAC;;EAE/C;EACA,IAAID,OAAO,GAAG,IAAID,SAAS,EAAE;EAC7BC,OAAO,CAACM,aAAa,CAACH,UAAU,CAAC;EACjC,IAAII,SAAS,GAAGP,OAAO,CAACA,OAAO,CAACK,SAAS,CAAC;EAE1CG,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC,CAAC,CAAC;EACxBC,OAAO,CAACC,GAAG,CAACJ,SAAS,CAAC,CAAC,CAAC;AAE5B;;AAEA,eAAeL,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}