[{"/home/michelestaffieri/WebstormProjects/CivicLife/frontend/src/index.tsx":"1","/home/michelestaffieri/WebstormProjects/CivicLife/frontend/src/reportWebVitals.ts":"2","/home/michelestaffieri/WebstormProjects/CivicLife/frontend/src/Login.tsx":"3","/home/michelestaffieri/WebstormProjects/CivicLife/frontend/src/MainPage.tsx":"4","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/index.tsx":"5","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Vote/VotationDetails.tsx":"6","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Vote/CandidateDetails.tsx":"7","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Vote/PartyDetails.tsx":"8","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/MainPage/MainPage.tsx":"9","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/App.tsx":"10","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Data/PersonalData.tsx":"11","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Data/UsersAdmin.tsx":"12","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Initiative/Initiatives.tsx":"13","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Initiative/initiativeDetails.tsx":"14","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Vote/Votations.tsx":"15","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Initiative/InitiativeCreateForm.tsx":"16","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Login/LoginChoser.tsx":"17","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Vote/VotationsAdmin.tsx":"18","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/APIs/UsersAPI.ts":"19","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/APIs/OauthAPI.ts":"20","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Data/AuthRequired.tsx":"21","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/APIs/ExternalResourcesAPI.ts":"22","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Error.tsx":"23","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/APIs/InitiativeAPI.ts":"24","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/APIs/VotationsAPI.ts":"25","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Utils/CustomComponents.tsx":"26"},{"size":599,"mtime":1669046529269,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1669044480504,"results":"29","hashOfConfig":"28"},{"size":2043,"mtime":1669046064630,"results":"30","hashOfConfig":"28"},{"size":5656,"mtime":1669051047908,"results":"31","hashOfConfig":"28"},{"size":753,"mtime":1674558117273,"results":"32","hashOfConfig":"33"},{"size":12562,"mtime":1674573442314,"results":"34","hashOfConfig":"33"},{"size":7390,"mtime":1674573442290,"results":"35","hashOfConfig":"33"},{"size":12643,"mtime":1674573442306,"results":"36","hashOfConfig":"33"},{"size":15446,"mtime":1674573211085,"results":"37","hashOfConfig":"33"},{"size":1852,"mtime":1674553405050,"results":"38","hashOfConfig":"33"},{"size":28910,"mtime":1674573211069,"results":"39","hashOfConfig":"33"},{"size":9060,"mtime":1674573211097,"results":"40","hashOfConfig":"33"},{"size":20404,"mtime":1674573211093,"results":"41","hashOfConfig":"33"},{"size":28276,"mtime":1674571305039,"results":"42","hashOfConfig":"33"},{"size":10767,"mtime":1674573211077,"results":"43","hashOfConfig":"33"},{"size":16002,"mtime":1674573009131,"results":"44","hashOfConfig":"33"},{"size":3556,"mtime":1674553405030,"results":"45","hashOfConfig":"33"},{"size":13143,"mtime":1674558117305,"results":"46","hashOfConfig":"33"},{"size":6785,"mtime":1674557752563,"results":"47","hashOfConfig":"33"},{"size":2269,"mtime":1674558117313,"results":"48","hashOfConfig":"33"},{"size":1289,"mtime":1673967380707,"results":"49","hashOfConfig":"33"},{"size":2094,"mtime":1674553405042,"results":"50","hashOfConfig":"33"},{"size":6407,"mtime":1674555231701,"results":"51","hashOfConfig":"33"},{"size":11056,"mtime":1674553405038,"results":"52","hashOfConfig":"33"},{"size":7913,"mtime":1674561900663,"results":"53","hashOfConfig":"33"},{"size":5763,"mtime":1674558117349,"results":"54","hashOfConfig":"33"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},"11gizi0",{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1su2bmi",{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/michelestaffieri/WebstormProjects/CivicLife/frontend/src/index.tsx",["148"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport Login from './Login';\nimport reportWebVitals from './reportWebVitals';\nimport MainPage from \"./MainPage\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nroot.render(\n  <React.StrictMode>\n    <MainPage />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"/home/michelestaffieri/WebstormProjects/CivicLife/frontend/src/reportWebVitals.ts",[],[],"/home/michelestaffieri/WebstormProjects/CivicLife/frontend/src/Login.tsx",["149"],[],"/home/michelestaffieri/WebstormProjects/CivicLife/frontend/src/MainPage.tsx",["150"],[],"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/index.tsx",[],[],"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Vote/VotationDetails.tsx",["151"],[],"import {\n    AppBar,\n    Avatar,\n    Button,\n    Dialog,\n    Divider,\n    Grid,\n    IconButton,\n    ListItem,\n    ListItemButton,\n    ListItemText,\n    Typography\n} from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\n\nimport React, {useEffect, useState} from \"react\";\nimport '../App.css'\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport {isInstanceOfAuthError, logoutUser, TokenData} from \"../APIs/OauthAPI\";\nimport {CssTextField} from \"../Utils/CustomComponents\";\nimport List from \"@mui/material/List\";\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\nimport Chip from \"@mui/material/Chip\";\nimport dayjs from \"dayjs\";\nimport {CandidateResult, getParties, Party, PartyResult, Votation} from \"../APIs/VotationsAPI\";\nimport GroupsIcon from '@mui/icons-material/Groups';\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport {User} from \"../APIs/UsersAPI\";\n\n\nconst VotationDetails = () => {\n    const [partyList, setPartyList] = useState<Party[] | null>(null)\n    const [resultsDialogOpen, setResultsDialogOpen] = useState(false)\n    const location = useLocation()\n    const tokenData : TokenData= location.state.token\n    const isVisitor : boolean= location.state.isVisitor\n    const navigate = useNavigate()\n    const votation : Votation= location.state.votation\n    const user : User = location.state.user\n    const showDialog = () => {\n        setResultsDialogOpen(true)\n    }\n\n    const closeDialog = () => {\n        setResultsDialogOpen(false)\n    }\n\n    const getVotationParties = async () => {\n        const response = await getParties(votation.title)\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setPartyList(response)\n        }\n    }\n\n    const getCandidateResult = () => {\n        let candidateResult: CandidateResult[] = []\n        votation.votationResult.partyResults.forEach((partyResult: PartyResult) => {\n            partyResult.candidateResults.forEach((candidate: CandidateResult) => {\n                candidateResult.push(candidate)\n            })\n        })\n        return candidateResult\n    }\n\n    useEffect(() => {\n        if (votation !== undefined && partyList === null) {\n            getVotationParties()\n        }\n\n    }, [])\n\n    const handlePartyDetailsOpen = (value: any) => {\n        navigate('/votations/votationDetails/partyDetails', {\n            state: {\n                token: tokenData,\n                votation: votation,\n                party: value,\n                isVisitor: isVisitor,\n                user: user\n            }\n        })\n    }\n\n    const logout = async () => {\n        if (tokenData !== null) {\n            const response = await logoutUser(tokenData)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    navigate('/')\n                } else {\n                    console.log('error')\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n    }\n\n    const goBack = () => {\n        navigate(-1)\n    }\n\n    const login = () => {\n        window.location.assign('http://localhost:8080/login')\n    }\n\n    const percentagetoFixed= (value: number) => {\n        value= value*100\n        return value.toFixed(2).toString() + '%'\n    }\n\n    return (\n        <>\n            <Grid item xs={12} justifyContent=\"center\" alignItems=\"center\">\n                <Box sx={{flexGrow: 1}}>\n                    <AppBar position=\"fixed\" sx={{backgroundColor: '#3d4347'}}>\n                        <Toolbar>\n                            <IconButton\n                                size=\"small\"\n                                edge=\"start\"\n                                aria-label=\"menu\"\n                                sx={{mr: 2}}\n                            >\n                                <ArrowBackIcon onClick={goBack} sx={{fontSize: '3rem', color: 'white'}}/>\n                            </IconButton>\n                            <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}\n                                        style={{\n                                            justifyContent: 'center',\n                                            color: '#feac0d',\n                                            textAlign: 'center',\n                                            fontSize: '1.8rem',\n                                        }}>\n                                {votation.title}\n                            </Typography>\n                            <Button\n                                onClick={isVisitor ? login : logout}\n                                style={{\n                                    color: 'white',\n                                    backgroundColor: isVisitor ? \"green\" : \"red\",\n                                }}>\n\n                                {isVisitor ? \"login\" : \"logout\"}\n                            </Button>\n                        </Toolbar>\n                    </AppBar>\n                </Box>\n            </Grid>\n\n            <Grid container display=\"flex\" justifyContent=\"flex-start\" alignItems=\"center\"\n                  sx={{width: '100%', position: 'fixed', top: 100}} spacing={3}>\n                <Grid item xs={12}>\n                    <Box sx={{width: '100%', height: '100%', border: '2.5px solid #feac0d',}}>\n                        <CssTextField\n                            sx={{input: {color: 'white'}, width: '100%', height: '100%',}}\n                            value={votation.description}\n                            maxRows={5}\n                            multiline\n                            InputProps={{\n                                readOnly: true,\n                                inputProps: {\n                                    style: {\n                                        color: 'white',\n                                    }\n                                }\n                            }}/>\n                    </Box>\n                </Grid>\n                <Grid item xs={12}>\n                    <Box sx={{width: 1}}>\n                        <Box display=\"grid\" gridTemplateColumns=\"repeat(12, 1fr)\" gap={2}>\n                            <Box gridColumn=\"span 6\" sx={{textAlign: \"center\"}}>\n                                Dal: <Chip sx={{backgroundColor: '#feac0d'}} icon={<CalendarMonthIcon/>}\n                                           label={dayjs.unix(votation.startDate).format('DD/MM/YYYY')}/>\n                            </Box>\n                            <Box gridColumn=\"span 6\" sx={{textAlign: \"center\"}}>\n                                Al: <Chip sx={{backgroundColor: '#feac0d'}} icon={<CalendarMonthIcon/>}\n                                          label={dayjs.unix(votation.endDate).format('DD/MM/YYYY')}/>\n                            </Box>\n                        </Box>\n                    </Box>\n                </Grid>\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <List sx={{\n                        width: '100%',\n                        overflow: 'auto',\n                        maxHeight: 580,\n                    }}>\n                        {partyList ? partyList.map((value, index) => {\n                            return (\n                                <><\n                                    ListItem key={index}>\n                                    {\n                                        value.logoLink ? <Avatar alt={value.name} src={value.logoLink}/> :\n                                            <GroupsIcon/>\n                                    }\n                                    <ListItemButton onClick={() => {\n                                        handlePartyDetailsOpen(value)\n                                    }}>{value.name}</ListItemButton>\n                                </ListItem>\n                                    <Divider color='white'/>\n                                </>\n                            );\n                        }) : null}\n                    </List>\n                </Grid>\n                {\n                    votation.status === 'TERMINATED' ?\n                        <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                            <Button style={{\n                                borderRadius: 35,\n                                backgroundColor: \"#ff3823\",\n                                padding: \"10px 20px\",\n                                fontSize: \"18px\"\n                            }}\n                                    onClick={showDialog}\n                                    variant=\"contained\">\n                                MOSTRA RISULTATI\n                            </Button>\n                        </Grid> : null\n                }\n                <Dialog maxWidth={\"sm\"} fullWidth={true} open={resultsDialogOpen} onClose={closeDialog}>\n                    <DialogTitle>Risultati {votation.title}</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                          secondaryTypographyProps={{fontSize: '15px'}}\n                                          primary={'Numero di elettori totale:'}\n                                          secondary={votation.votationResult.numberOfVotes}/>\n                            <Divider/>\n                            <ListItemText\n                                primaryTypographyProps={{fontWeight: 'bold', fontSize: '19px', color: 'black'}}\n                                primary={'Per partito'}/>\n                            {\n                                votation.votationResult.partyResults.map((value: PartyResult) => {\n                                    return (\n                                        <>\n                                            <ListItem>\n                                                <ListItemText sx={{\n                                                    fontSize: '15px',\n                                                    fontWeight: 'bold',\n                                                    color: 'black'\n                                                }}>{value.partyId}</ListItemText>\n                                                <ListItemText>N° voti: {value.votes}</ListItemText>\n                                                <ListItemText>Percentuale: {percentagetoFixed(value.percentage)}</ListItemText>\n                                                <Divider/>\n                                            </ListItem>\n\n                                        </>\n                                    )\n                                })\n                            }\n                            <ListItemText\n                                primaryTypographyProps={{fontWeight: 'bold', fontSize: '19px', color: 'black'}}\n                                primary={'Per candidato'}/>\n                            {\n                                getCandidateResult().map((value: CandidateResult) => {\n                                    return (\n                                        <>\n                                            <ListItemText sx={{\n                                                fontSize: '15px',\n                                                fontWeight: 'bold',\n                                                color: 'black'\n                                            }}>{value.name} {value.surname}</ListItemText>\n                                            <ListItemText>N° voti: {value.votes}</ListItemText>\n                                            <ListItemText>Percentuale: {percentagetoFixed(value.percentage)}</ListItemText>\n\n                                        </>\n                                    )\n                                })\n                            }\n\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={closeDialog}>Chiudi</Button>\n                    </DialogActions>\n                </Dialog>\n\n\n            </Grid>\n\n        </>\n    );\n\n}\n\nexport default VotationDetails;\n","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Vote/CandidateDetails.tsx",[],[],"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Vote/PartyDetails.tsx",["152"],[],"import {\n    AppBar,\n    Button,\n    Card,\n    CardActionArea,\n    CardActions,\n    CardContent,\n    CardMedia,\n    Grid,\n    IconButton,\n    List,\n    Typography\n} from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\n\n\nimport React, {useEffect, useState} from \"react\";\n\nimport personalData from \"../imgs/personaldata.png\"\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport {isInstanceOfAuthError, logoutUser, TokenData} from \"../APIs/OauthAPI\";\nimport {CssTextField} from \"../Utils/CustomComponents\";\nimport {Candidate, getCandidates, Party, Votation, voteForCandidate, voteForParty} from \"../APIs/VotationsAPI\";\nimport GroupsIcon from \"@mui/icons-material/Groups\";\nimport Stack from \"@mui/material/Stack\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert, {AlertProps} from \"@mui/material/Alert\";\nimport {User} from \"../APIs/UsersAPI\";\n\nconst PartyDetails = () => {\n\n    const [candidateList, setCandidateList] = useState<any[]|null>(null)\n    const location = useLocation()\n    const navigate = useNavigate()\n    const party : Party= location.state.party\n    const tokenData : TokenData= location.state.token\n    const isVisitor : boolean= location.state.isVisitor\n    const votation :Votation= location.state.votation\n    const user : User = location.state.user\n\n    const [open, setOpen] = useState(false);\n    const [openError, setOpenError] = useState(false);\n\n    const handleCloseError = (event?: React.SyntheticEvent| Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpenError(false);\n    }\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpen(false);\n    };\n\n    const Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n        props,\n        ref,\n    ) {\n        return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n    });\n\n    const hasAlreadyVoted = () : boolean=> {\n        return !isVisitor && votation.votationResult.votersIdList.includes(user.email)\n    }\n\n    const getCandidatesList = async () => {\n        const response= await getCandidates(party.name)\n        if(isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        }\n        else{\n            setCandidateList(response)\n        }\n    }\n\n    useEffect(() => {\n        if(party !== undefined && candidateList===null) {\n            getCandidatesList()\n        }\n\n    },[])\n\n    const handleCandidateDetailsOpen = (value: any) => {\n        navigate('/votations/votationDetails/partyDetails/candidateDetails', {\n            state: {\n                token: tokenData,\n                user: user,\n                votation: votation,\n                party: party,\n                candidate: value,\n                hasVoted: hasAlreadyVoted(),\n                isVisitor: isVisitor\n            }\n        })\n    }\n\n    const logout = async () => {\n        if (tokenData !== null) {\n            const response = await logoutUser(tokenData)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    navigate('/')\n                } else {\n                    console.log('error')\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n    }\n\n    const voteParty = async () => {\n        const response= await voteForParty(tokenData, votation.title, party.name)\n        if(typeof response === 'boolean') {\n            if(response) {\n                setOpen(true)\n                navigate('/votations/', {state: {token: tokenData, user: user, isVisitor: isVisitor}})\n            }\n            else{\n                setOpenError(true)\n            }\n        }else{\n            navigate('/error', {state: {error: response}})\n        }\n    }\n\n    const voteCandidate = async (value: Candidate) => {\n        const response = await voteForCandidate(tokenData, votation.title, party.name, value.id)\n        if(typeof response === 'boolean') {\n            if(response) {\n                setOpen(true)\n                navigate('/votations/', {state: {token: tokenData, user: user, isVisitor: isVisitor}})\n            }\n            else{\n                setOpenError(true)\n            }\n        }else{\n            navigate('/error', {state: {error: response}})\n        }\n    }\n\n    const goBack = () => {\n        navigate(-1)\n    }\n\n    const login = () => {\n        window.location.assign('http://localhost:8080/login')\n    }\n\n\n    return (\n        <>\n            <Grid container direction='row' spacing={5}>\n                <Box sx={{flexGrow: 1}}>\n                    <AppBar position=\"fixed\" sx={{backgroundColor: '#3d4347'}}>\n                        <Toolbar>\n                            <IconButton\n                                size=\"small\"\n                                edge=\"start\"\n                                aria-label=\"menu\"\n                                sx={{mr: 2}}\n                            >\n                                <ArrowBackIcon onClick={goBack} sx={{fontSize: '3rem', color: 'white'}}/>\n                            </IconButton>\n\n                            <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}\n                                        style={{\n                                            justifyContent: 'center',\n                                            color: '#feac0d',\n                                            textAlign: 'center',\n                                            fontSize: '1.8rem',\n                                        }}>\n                                {party.name}\n                            </Typography>\n                            <Button\n                                onClick={isVisitor ? login : logout}\n                                style={{\n                                    color: 'white',\n                                    backgroundColor: isVisitor ? \"green\" : \"red\",\n                                }}>\n\n                                {isVisitor ? \"login\" : \"logout\"}\n                            </Button>\n                        </Toolbar>\n                    </AppBar>\n                </Box>\n            </Grid>\n            <Grid container display=\"flex\" justifyContent=\"flex-start\" alignItems=\"center\"\n                  sx={{width: '100%', marginTop: '80px'}} spacing={3}>\n\n                <Grid item xs={12} display=\"flex\" justifyContent='center' alignItems=\"right\">\n                        {\n                            party.logoLink ? <img style={{width:230, height:200}} alt={party.name} src={party.logoLink}/> :\n                                <GroupsIcon/>\n                        }\n                </Grid>\n                <Grid item xs={12}>\n                    <Box sx={{width: '100%', height: '100%', border: '2.5px solid #feac0d',}}>\n                        <CssTextField\n                            sx={{input: {color: 'white'}, width: '100%', height: '100%',}}\n                            value={party.description}\n                            maxRows={5}\n                            multiline\n                            InputProps={{\n                                readOnly: true,\n                                inputProps: {\n                                    style: {\n                                        color: 'white',\n                                    }\n                                }\n                            }}/>\n                    </Box>\n                </Grid>\n                <Grid item xs={12}>\n                    {\n                        (user && user.admin) ? null : user && !hasAlreadyVoted() ?\n                            <Grid item xs={12} display=\"flex\" justifyContent='center' alignItems=\"right\">\n                                <Button style={{\n                                    borderRadius: 35,\n                                    backgroundColor: \"#ff3823\",\n                                    padding: \"10px 20px\",\n                                    fontSize: \"18px\"\n                                }}\n                                        onClick={voteParty}\n                                        variant=\"contained\">\n                                    VOTA Partito\n                                </Button>\n                            </Grid> : null\n                    }\n                </Grid>\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <List sx={{\n                        width: '100%',\n                        overflow: 'auto',\n                        maxHeight: 580,\n                    }}>\n                    <Grid container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n                        <Box sx={{width: '70%', height: '100%'}}>\n                            <Grid\n                                container\n                                spacing={1}\n                                alignContent=\"center\"\n                                wrap=\"wrap\"\n                                style={{width: '100%'}}\n                            >\n                                {candidateList ? candidateList.map((value, index) => {\n                                    return (\n                                        <>\n                                            <Card sx={{maxWidth: 345, margin: '20px'}}>\n                                                <CardActionArea onClick={() => {\n                                                    handleCandidateDetailsOpen(value)\n                                                }}>\n                                                    <CardMedia\n                                                        component=\"img\"\n                                                        image={value.imageLink ? value.imageLink: personalData}\n                                                        alt={value.name}\n                                                    />\n                                                    <CardContent>\n                                                        <Typography gutterBottom variant=\"h5\" component=\"div\">\n                                                            {value.name} {value.surname}\n                                                        </Typography>\n                                                    </CardContent>\n                                                </CardActionArea>\n                                                {\n                                                    user && user.admin ? null : user && !hasAlreadyVoted()?\n                                                        <CardActions style={{alignItems: 'center'}}>\n                                                            <Button size=\"large\" onClick={() => {voteCandidate(value)}}\n                                                                    style={{color: '#ff3823', width: '100%'}}>Vota\n                                                                Candidato</Button>\n                                                        </CardActions> : null\n                                                }\n                                            </Card>\n\n                                        </>\n                                    );\n                                }): null}\n                            </Grid>\n                        </Box>\n                    </Grid>\n                    </List>\n                </Grid>\n            </Grid>\n            <Stack spacing={2} sx={{width: '100%'}}>\n                <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}\n                          anchorOrigin={{vertical: \"bottom\", horizontal: 'center'}}>\n                    <Alert onClose={handleClose} severity=\"success\" sx={{width: '100%'}}>\n                        Voto registrato con successo!\n                    </Alert>\n                </Snackbar>\n            </Stack>\n            <Stack spacing={2} sx={{width: '100%'}}>\n                <Snackbar open={openError} autoHideDuration={3000} onClose={handleCloseError}\n                          anchorOrigin={{vertical: \"bottom\", horizontal: 'center'}}>\n                    <Alert onClose={handleCloseError} severity=\"warning\" sx={{width: '100%'}}>\n                        Non è stato possibile registrare il voto! Riprova più tardi.\n                    </Alert>\n                </Snackbar>\n            </Stack>\n        </>\n    );\n}\n\nexport default PartyDetails;","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/MainPage/MainPage.tsx",["153"],[],"import {\n    AppBar,\n    Button,\n    Card,\n    CardActionArea,\n    CardContent,\n    CardMedia,\n    Grid,\n    IconButton,\n    Typography\n} from \"@mui/material\";\nimport React, {useEffect, useState} from \"react\";\nimport '../App.css';\nimport vote from \"../imgs/voteResize.png\"\nimport iniziative from \"../imgs/iniziativeResize.png\"\nimport personaldata from \"../imgs/personaldataResize.png\"\nimport \"@fontsource/ubuntu-mono\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport {isInstanceOfAuthError, logoutUser} from \"../APIs/OauthAPI\";\nimport type {User} from \"../APIs/UsersAPI\";\nimport {getLoggedUser, UserStatus, UserStatusColor} from \"../APIs/UsersAPI\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport HomeIcon from '@mui/icons-material/Home';\nimport AdminPanelSettingsIcon from '@mui/icons-material/AdminPanelSettings';\nimport CircleIcon from '@mui/icons-material/Circle';\nimport LockIcon from '@mui/icons-material/Lock';\n\n\nconst MainPage = () => {\n\n    const location = useLocation();\n    const isVisitor :boolean = location.state.isVisitor\n    const tokenData = location.state.tokenData\n    const navigate = useNavigate();\n    const [firstLoad, setFirstLoad] = useState(true);\n    const [user, setUser] = useState<User | null>(null);\n\n    const getUserData = async () => {\n        if (tokenData !== null) {\n            const response = await getLoggedUser(tokenData)\n            if (isInstanceOfAuthError(response)) {\n                navigate('/error', {state: {error: response}})\n            } else {\n                setUser(response)\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (tokenData !== null && firstLoad) {\n            getUserData()\n        }\n        setFirstLoad(false)\n    }, [])\n\n    const login = () => {\n        window.location.assign('http://localhost:8080/login')\n    }\n\n    const logout = async () => {\n        if (tokenData !== null) {\n            const response = await logoutUser(tokenData)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    navigate('/')\n                } else {\n                    console.log('error')\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n    }\n\n    const goToVotations = () => {\n        if (user && user.admin) {\n            navigate('/votationsAdmin', {state: {token: tokenData}})\n        } else {\n            navigate('/votations', {state: {token: tokenData, isVisitor: isVisitor, user: user}})\n        }\n    }\n\n    const goToData = () => {\n        if (user !== null) {\n            if (user.admin) {\n                navigate('/usersAdmin', {state: {token: tokenData}})\n            } else {\n                navigate('/myData', {state: {token: tokenData}})\n            }\n        }\n\n    }\n\n    const goToInitiatives = () => {\n        if ((user && user.status !== UserStatus.BANNED) || isVisitor) {\n            navigate('/initiatives', {state: {token: tokenData, isVisitor: isVisitor, user: user}})\n        }\n    }\n\n    return (\n        <>\n            <Grid container direction=\"row\" spacing={3}>\n                <Grid item xs={12} justifyContent=\"center\" alignItems=\"center\">\n                    <Box sx={{flexGrow: 1}}>\n                        <AppBar position=\"fixed\" sx={{backgroundColor: '#3d4347'}}>\n                            <Toolbar>\n                                <IconButton\n                                    disabled={true}\n                                    size=\"large\"\n                                    edge=\"start\"\n                                    aria-label=\"menu\"\n                                    sx={{mr: 2}}\n                                >\n                                    {user && user.admin ? <AdminPanelSettingsIcon sx={{color: '#feac0d'}}/> :\n                                        <><HomeIcon sx={{color: 'white'}}/><CircleIcon\n                                            sx={{color: user ? UserStatusColor[user.status] : null}}/></>\n                                    }\n                                </IconButton>\n                                {user && !isVisitor ?\n                                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}\n                                                style={{\n                                                    justifyContent: 'center',\n                                                    color: 'white',\n                                                    textAlign: 'center',\n                                                    fontSize: '1.8rem',\n                                                }}>BENVENUTO {user.name} {user.surname}\n                                    </Typography>\n                                    : <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}\n                                                  style={{color: 'white', textAlign: 'center', fontSize: '1.2rem'}}>BENVENUTO\n                                        OSPITE\n                                    </Typography>}\n                                <Button\n                                    onClick={isVisitor ? login : logout}\n                                    style={{\n                                        color: 'white',\n                                        backgroundColor: isVisitor ? \"green\" : \"red\",\n                                    }}>\n\n                                    {isVisitor ? \"login\" : \"logout\"}\n                                </Button>\n                            </Toolbar>\n                        </AppBar>\n                    </Box>\n                </Grid>\n            </Grid>\n\n            <Grid xs={8} container direction=\"column\" display=\"flex\" justifyContent=\"space-around\" alignItems=\"stretch\"\n                  sx={{marginTop: '80px'}}>\n                <Card sx={{\n                    maxHeight: '300px', margin: '20px', \"&:hover\": {\n                        background: \"#d7d7d7\"\n                    }\n                }} onClick={goToVotations}>\n                    <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\" sx={{backgroundColor:'#ff5d55'}}>\n                    <CardMedia\n                        sx={{backgroundColor: '#ff5d55', maxWidth: 200, maxHeight: 200}}\n                        component=\"img\"\n                        alt=\"vote img\"\n                        height=\"200\"\n                        image={vote}\n                    />\n                    </Grid>\n                    <CardActionArea>\n                        <Grid container direction=\"column\">\n                            <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                                <CardContent>\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\n                                    {user && user.admin ? 'Inserisci Votazioni' : 'Votazioni'}\n                                </Typography>\n                                </CardContent>\n                            </Grid>\n                        </Grid>\n                    </CardActionArea>\n                </Card>\n                <Card sx={{\n                    maxHeight: '300px', margin: '20px', \"&:hover\": {\n                        background: \"#d7d7d7\"\n                    }\n                }} onClick={goToInitiatives}>\n                    {user && user.status===UserStatus.BANNED ? <LockIcon sx={{position:'absolute', margin: 1}}/>: null}\n                        <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\" sx={{backgroundColor:'#f1f6be'}}>\n                            <CardMedia\n                                sx={{ maxWidth: 320, maxHeight:200, backgroundColor:'#f1f6be' }}\n                                component=\"img\"\n                                alt=\"vote img\"\n                                height=\"200\"\n                                image={iniziative}\n                            />\n                        </Grid>\n                        <CardActionArea>\n                            <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                                <CardContent>\n                                    <Typography gutterBottom variant=\"h5\" component=\"div\">\n                                        {user && user.admin ? 'Gestisci iniziative' : 'Iniziative'}\n                                    </Typography>\n                                </CardContent>\n                            </Grid>\n\n                        </CardActionArea>\n                </Card>\n                {isVisitor ? null :\n                    <Card\n                        onClick={goToData}\n                        sx={{\n                            maxHeight: '300px', margin: '20px', \"&:hover\": {\n                                background: \"#d7d7d7\"\n                            }\n                        }}>\n                        <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\" sx={{backgroundColor:'#d4e3fc'}}>\n                            <CardMedia\n                                sx={{backgroundColor: '#d4e3fc', maxWidth: 269, maxHeight:200}}\n                                component=\"img\"\n                                alt=\"vote img\"\n                                height=\"200\"\n                                image={personaldata}\n                            />\n                        </Grid>\n\n\n                        <CardActionArea>\n                            <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                                <CardContent>\n                                    <Typography gutterBottom variant=\"h5\" component=\"div\">\n                                        {user && user.admin ? 'Modera utenti' : 'I tuoi Dati'}\n                                    </Typography>\n                                </CardContent>\n                            </Grid>\n                        </CardActionArea>\n                    </Card>\n                }\n            </Grid>\n            {/*<Grid item xs={12} alignContent='center'>*/}\n            {/*    <Card sx={{*/}\n            {/*        width: '60%', \"&:hover\": {*/}\n            {/*            background: \"#d7d7d7\"*/}\n            {/*        }*/}\n            {/*    }} onClick={goToVotations}>*/}\n            {/*        <CardActionArea>*/}\n            {/*            <Grid container direction=\"column\">*/}\n            {/*                <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\"*/}\n            {/*                      style={{backgroundColor: '#ff5d55'}}>*/}\n            {/*                    <CardMedia*/}\n            {/*                        component=\"img\"*/}\n            {/*                        image={vote}*/}\n            {/*                        sx={{*/}\n            {/*                            width: '45%',*/}\n            {/*                        }}*/}\n            {/*                        alt=\"vote\"/>*/}\n            {/*                </Grid>*/}\n            {/*                <Divider style={{marginTop: '5px'}}/>*/}\n            {/*                <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\">*/}\n            {/*                    <CardContent>*/}\n            {/*                        <Typography gutterBottom variant=\"h5\" component=\"div\">*/}\n            {/*                            {user && user.admin ? 'Inserisci Votazioni' : 'Votazioni'}*/}\n            {/*                        </Typography>*/}\n            {/*                    </CardContent>*/}\n            {/*                </Grid>*/}\n            {/*            </Grid>*/}\n            {/*        </CardActionArea>*/}\n            {/*    </Card>*/}\n            {/*</Grid>*/}\n            {/*<Grid item xs={12} alignContent=\"center\">*/}\n            {/*    <Card sx={{*/}\n            {/*        width: '60%', \"&:hover\": {*/}\n            {/*            background: \"#d7d7d7\"*/}\n            {/*        }*/}\n            {/*    }} onClick={goToInitiatives}>*/}\n            {/*        <CardActionArea>*/}\n            {/*            <Grid container direction=\"column\">*/}\n            {/*                <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\"*/}\n            {/*                      style={{backgroundColor: '#f1f6be'}}>*/}\n            {/*                    <CardMedia*/}\n            {/*                        component=\"img\"*/}\n            {/*                        image={iniziative}*/}\n            {/*                        sx={{*/}\n            {/*                            width: '70%',*/}\n            {/*                        }}*/}\n            {/*                        alt=\"iniziative\"/>*/}\n            {/*                </Grid>*/}\n            {/*                <Divider style={{marginTop: '5px'}}/>*/}\n            {/*                <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\">*/}\n            {/*                    <CardContent>*/}\n            {/*                        <Typography gutterBottom variant=\"h5\" component=\"div\">*/}\n            {/*                            {user && user.admin ? 'Gestisci iniziative' : 'Iniziative'}*/}\n            {/*                        </Typography>*/}\n            {/*                    </CardContent>*/}\n            {/*                </Grid>*/}\n            {/*            </Grid>*/}\n            {/*        </CardActionArea>*/}\n            {/*    </Card>*/}\n            {/*</Grid>*/}\n            {/*{isVisitor ? null :*/}\n            {/*    <Grid item xs={12} alignContent='center'>*/}\n            {/*        <Card*/}\n            {/*            onClick={goToData}*/}\n            {/*            sx={{*/}\n            {/*                width: '60%', \"&:hover\": {*/}\n            {/*                    background: \"#d7d7d7\"*/}\n            {/*                }*/}\n            {/*            }}>*/}\n            {/*            <CardActionArea>*/}\n            {/*                <Grid container direction=\"column\">*/}\n            {/*                    <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\"*/}\n            {/*                          style={{backgroundColor: '#d4e3fc'}}>*/}\n            {/*                        <CardMedia*/}\n            {/*                            component=\"img\"*/}\n            {/*                            image={personalData}*/}\n            {/*                            sx={{*/}\n            {/*                                width: '60%',*/}\n            {/*                            }}*/}\n            {/*                            alt=\"personalData\"/>*/}\n            {/*                    </Grid>*/}\n            {/*                    <Divider style={{marginTop: '5px'}}/>*/}\n            {/*                    <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\">*/}\n            {/*                        <CardContent>*/}\n            {/*                            <Typography gutterBottom variant=\"h5\" component=\"div\">*/}\n            {/*                                {user && user.admin ? 'Modera utenti' : 'I tuoi Dati'}*/}\n            {/*                            </Typography>*/}\n            {/*                        </CardContent>*/}\n            {/*                    </Grid>*/}\n            {/*                </Grid>*/}\n            {/*            </CardActionArea>*/}\n            {/*        </Card>*/}\n            {/*    </Grid>*/}\n            {/*}*/}\n        </>\n    );\n}\n\nexport default MainPage;","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/App.tsx",[],[],"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Data/PersonalData.tsx",["154","155","156","157"],[],"import {AppBar, Button, Dialog, Divider, Grid, IconButton, ListItemText, Typography,} from \"@mui/material\";\nimport '../App.css'\nimport React, {useEffect, useState} from \"react\";\nimport UpperButtonMenu, {Android12Switch, CssTextField} from \"../Utils/CustomComponents\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport type {User} from \"../APIs/UsersAPI\";\nimport {\n    authorizeBonusAccess,\n    authorizeVaccineAccess,\n    getLoggedUser,\n    isInstanceOfUser,\n    updateUser\n} from \"../APIs/UsersAPI\";\nimport AuthRequired from \"./AuthRequired\";\nimport dayjs, {Dayjs} from \"dayjs\";\nimport {DatePicker, LocalizationProvider} from \"@mui/x-date-pickers\";\nimport {AdapterDayjs} from \"@mui/x-date-pickers/AdapterDayjs\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport List from \"@mui/material/List\";\nimport {BonusType, getAllBonuses, getAllVaccines, VaccineType} from \"../APIs/ExternalResourcesAPI\";\nimport Stack from '@mui/material/Stack';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport AddBoxIcon from '@mui/icons-material/AddBox';\nimport VaccinesIcon from '@mui/icons-material/Vaccines';\nimport {AuthError, isInstanceOfAuthError, logoutUser, TokenData} from \"../APIs/OauthAPI\";\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from \"@mui/material/FormControl\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\n\n\nconst PersonalData = () => {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const [user, setUser] = useState<User | null>(null)\n    const tokenData : TokenData= location.state.token\n    const buttons = ['Dati', 'Vaccini', 'Bonus']\n    const [dataList, setDataList] = useState([])\n    const [vaccinesList, setVaccinesList] = useState<VaccineType[]>([])\n    const [bonusList, setBonusList] = useState<BonusType[]>([])\n    const [showingList, setShowingList] = useState(dataList)\n    const [activeButton, setActiveButton] = useState(buttons[0]);\n    const [clickedVaccine, setClickedVaccine] = useState<VaccineType | null>(null)\n    const [clickedBonus, setClickedBonus] = useState<BonusType | null>(null)\n    const [showBonusAuthorizationRequiredMessage, setShowBonusAuthorizationRequiredMessage] = useState(false)\n    const [showVaccineAuthorizationRequiredMessage, setShowVaccineAuthorizationRequiredMessage] = useState(false)\n\n    const [name, setName] = useState<string>('')\n    const [surname, setSurname] = useState<string>('')\n    const [birthDate, setBirthDate] = useState<Dayjs | null>(null)\n    const [residence, setResidence] = useState<string>('')\n    const [domicile, setDomicile] = useState<string>('')\n    const [telephonNumber, setTelephonNumber] = useState<number>(0)\n    const [fiscalCode, setFiscalCode] = useState<string>('')\n    const [message, setMessage] = useState<string>('')\n    const [bonusAccess, setBonusAccess] = useState<boolean | null>(null)\n    const [vaccineAccess, setVaccineAccess] = useState<boolean | null>(null)\n\n    useEffect(() => {\n        if (user === null) {\n            somethingChanged()\n        }\n    })\n\n    useEffect(() => {\n        if (user !== null) {\n            setName(user.name)\n            setSurname(user.surname)\n            setBirthDate(user.birthDate !== 0 ? dayjs.unix(user.birthDate): null )\n            setResidence(user.residence)\n            setDomicile(user.domicile)\n            setTelephonNumber(user.telephonNumber)\n            setFiscalCode(user.fiscalCode)\n            setBonusAccess(user.authorizeBonus)\n            setVaccineAccess(user.authorizeVaccine)\n\n            if(user.authorizeBonus){\n                loadBonuses()\n            }\n            if(user.authorizeVaccine){\n                loadVaccines()\n            }\n        }\n    }, [user])\n\n    const somethingChanged = async (message?: string) => {\n        const response = await getLoggedUser(tokenData)\n        if (isInstanceOfUser(response)) {\n            setUser(response)\n            if (message) {\n                handleClick()\n                setMessage(message)\n            }\n        } else {\n            navigate('/error', {state: {error: response}})\n        }\n    }\n\n    const Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n        props,\n        ref,\n    ) {\n        return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n    });\n\n    const handleNameChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setName(event.target.value);\n    }\n    const handleSurnameChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSurname(event.target.value);\n    }\n\n    const handleBirthDateChanged = (newValue: Dayjs | null) => {\n        if (dayjs(newValue, 'DD/MM/YYYY', true).isValid()) {\n            setBirthDate(newValue);\n        }\n        else{\n            console.log(\"Invalid date\")\n        }\n    }\n    const handleResidenceChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setResidence(event.target.value);\n    }\n    const handleDomicileChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setDomicile(event.target.value);\n    }\n    const handleTelephoneNumberChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setTelephonNumber(parseInt(event.target.value));\n    }\n    const handleFiscalCodeChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFiscalCode(event.target.value);\n    }\n\n    const loadBonuses = async () => {\n        const bonuslist = await getAllBonuses(tokenData)\n        if(isInstanceOfAuthError(bonuslist)){\n            navigate('/error', {state: {error: bonuslist}})\n        }\n        else{\n            setBonusList(bonuslist)\n            setShowBonusAuthorizationRequiredMessage(false)\n            //somethingChanged()\n        }\n    }\n\n    const loadVaccines = async () => {\n        const vaccineList = await getAllVaccines(tokenData)\n        if(isInstanceOfAuthError(vaccineList)){\n            navigate('/error', {state: {error: vaccineList}})\n        }\n        else{\n            setVaccinesList(vaccineList)\n            setShowVaccineAuthorizationRequiredMessage(false)\n            //somethingChanged()\n        }\n    }\n\n    const [open, setOpen] = useState(false);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpen(false);\n    };\n\n    function toTimestamp(strDate: string){\n        const datum = Date.parse(strDate);\n        return datum/1000;\n    }\n\n    function checkDataChanged(date: Dayjs | null, oldDate: number){\n        if(date === null){\n            return false\n        }\n        else{\n            return date.unix() !== oldDate\n        }\n    }\n\n    const updateUserData = async (): Promise<boolean | AuthError> => {\n        if (user) {\n\n            const newUser: User = {\n                email: user.email,\n                name: name,\n                surname: surname,\n                admin: user.admin,\n                fiscalCode: fiscalCode,\n                residence: residence,\n                birthDate: birthDate && checkDataChanged(birthDate, user.birthDate) ? toTimestamp(birthDate.toString()) : user.birthDate,\n                domicile: domicile,\n                status: user.status,\n                telephonNumber: Number(telephonNumber),\n                authorizeBonus: bonusAccess !== null ? bonusAccess : user.authorizeBonus,\n                authorizeVaccine: vaccineAccess !== null ? vaccineAccess : user.authorizeVaccine\n            }\n\n            return await updateUser(tokenData, newUser)\n        }\n        return false\n    }\n\n    const authBonus = async () => {\n        const updateResult = await authorizeBonusAccess(tokenData)\n        if(typeof updateResult === 'boolean') {\n            if (updateResult) {\n                loadBonuses()\n                setShowBonusAuthorizationRequiredMessage(false)\n                setBonusAccess(true)\n            }\n        }\n        else{\n            navigate('/error', {state: {error: updateResult}})\n        }\n    }\n\n    const authVaccine = async () => {\n        const updateResult = await authorizeVaccineAccess(tokenData)\n        if(typeof updateResult === 'boolean'){\n            if (updateResult) {\n                loadVaccines()\n                setShowVaccineAuthorizationRequiredMessage(false)\n                setVaccineAccess(true)\n            }\n        }\n        else{\n            navigate('/error', {state: {error: updateResult}})\n        }\n    }\n\n    const handleVaccineAuthorizationChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setVaccineAccess(event.target.checked)\n    }\n\n    const handleBonusAuthorizationChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setBonusAccess(event.target.checked)\n    }\n\n    useEffect(() => {\n        if (user) {\n            setShowVaccineAuthorizationRequiredMessage(false)\n            setShowBonusAuthorizationRequiredMessage(false)\n            if (activeButton === buttons[1]) {\n                if (!user.authorizeVaccine) {\n                    setShowVaccineAuthorizationRequiredMessage(true)\n                }\n            } else if (activeButton === buttons[2]) {\n                if (!user.authorizeBonus) {\n                    setShowBonusAuthorizationRequiredMessage(true)\n                }\n            }\n        }\n    }, [activeButton])\n\n    const handleOperation = async () => {\n        if (activeButton === buttons[0]) {\n            const update = await updateUserData()\n            if (update) {\n                somethingChanged('Dati aggiornati correttamente')\n            }\n        }\n    }\n\n    const handleDialogOpen = (data: any) => {\n        if (activeButton === buttons[1]) {\n            setClickedVaccine(data)\n        } else if (activeButton === buttons[2]) {\n            setClickedBonus(data)\n        }\n    }\n\n    const handleDialogClose = () => {\n        setClickedVaccine(null)\n        setClickedBonus(null)\n    }\n\n    const logout = async () => {\n        if (tokenData !== null) {\n            const response = await logoutUser(tokenData)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    navigate('/')\n                } else {\n                    console.log('error')\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n    }\n\n    const goBack = () => {\n        navigate(-1)\n    }\n\n    return (\n        <Grid container direction=\"row\" spacing={2}>\n            <Grid item xs={12} justifyContent=\"center\" alignItems=\"center\" >\n                <Box sx={{ flexGrow: 1 }}>\n                    <AppBar position=\"fixed\" sx={{backgroundColor:'#3d4347' }}>\n                        <Toolbar>\n                            <IconButton\n                                size=\"small\"\n                                edge=\"start\"\n                                aria-label=\"menu\"\n                                sx={{ mr: 2}}\n                            >\n                                <ArrowBackIcon onClick={goBack} sx={{fontSize: '3rem', color: 'white'}}/>\n                            </IconButton>\n                            <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}\n                                        style={{\n                                            justifyContent: 'center',\n                                            color: 'white',\n                                            textAlign: 'center',\n                                            fontSize: '1.8rem',\n                                        }}>I tuoi dati\n                            </Typography>\n                            <Button sx={{color: 'white', backgroundColor: 'red'}}\n                                onClick={logout}>\n                                logout\n                            </Button>\n                        </Toolbar>\n                    </AppBar>\n                </Box>\n            </Grid>\n            <UpperButtonMenu first_label={buttons[0]} second_label={buttons[1]} third_label={buttons[2]}\n                             first_list={dataList} second_list={vaccinesList} third_list={bonusList}\n                             listSetter={setShowingList} buttonSetter={setActiveButton}/>\n            {\n                showBonusAuthorizationRequiredMessage || showVaccineAuthorizationRequiredMessage ?\n                    <>\n                        <AuthRequired authFor={showVaccineAuthorizationRequiredMessage ? 'Vaccini' : 'Bonus'}\n                                      authFunction={showVaccineAuthorizationRequiredMessage ? authVaccine : authBonus}/>\n                    </>\n                    : null\n            }\n            {\n                activeButton === buttons[2] && bonusList.length === 0 && user && user.authorizeBonus ?\n                    <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                        <Typography variant=\"h4\" sx={{paddingLeft: '10px', paddingRight:'10px', textAlign: 'center',}}>Non possiedi bonus</Typography>\n\n                    </Grid>: null\n            }\n            {\n                activeButton === buttons[1] && vaccinesList.length === 0 && user && user.authorizeVaccine ?\n                    <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                        <Typography variant=\"h4\" sx={{paddingLeft: '10px', paddingRight:'10px', textAlign: 'center',}}>Non possiedi vaccini</Typography>\n\n                    </Grid>: null\n            }\n            <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <List sx={{\n                    width: '85%',\n                    overflow: 'auto',\n                    maxHeight: 550,\n                    position: activeButton === buttons[0] ? 'fixed' : (showBonusAuthorizationRequiredMessage || showVaccineAuthorizationRequiredMessage ? null : 'fixed'),\n                    top: '20%',\n                    bottom: '1%'\n                }}>\n                    {\n                        user ?\n                            activeButton === buttons[0] ?\n                                <>\n                                    <CssTextField\n                                        sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}\n                                        label={'Nome'} defaultValue={user.name} onChange={handleNameChanged}/>\n                                    <CssTextField\n                                        sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}\n                                        label={'Cognome'} defaultValue={user.surname}\n                                        onChange={handleSurnameChanged}/>\n                                    <CssTextField\n                                        sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}\n                                        label={'Email'} defaultValue={user.email} InputProps={{readOnly: true}}/>\n                                    <CssTextField\n                                        sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}\n                                        label={'Numero di telefono'} defaultValue={user.telephonNumber}\n                                        onChange={handleTelephoneNumberChanged}/>\n                                    <CssTextField\n                                        sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}\n                                        label={'Codice fiscale'} defaultValue={user.fiscalCode}\n                                        onChange={handleFiscalCodeChanged}/>\n                                    <CssTextField\n                                        sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}\n                                        label={'Residenza'} defaultValue={user.residence}\n                                        onChange={handleResidenceChanged}/>\n                                    <CssTextField\n                                        sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}\n                                        label={'Domicilio'} defaultValue={user.domicile}\n                                        onChange={handleDomicileChanged}/>\n                                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                                        <DatePicker\n                                            inputFormat=\"DD/MM/YYYY\"\n                                            label=\"Data di nascita\"\n                                            value={birthDate}\n\n                                            renderInput={(params) => <CssTextField {...params} sx={{\n                                                input: {color: 'white'},\n                                                style: {color: 'white'},\n                                                marginTop: '9px'\n                                            }}/>}\n                                            onChange={(newValue) => {\n                                                handleBirthDateChanged(newValue)\n                                            }}/>\n                                    </LocalizationProvider>\n                                    <CssTextField\n                                        sx={{input: {color: 'white'}, style: {color: 'white'}, marginTop: '9px'}}\n                                        label={'Stato'} defaultValue={user.status} InputProps={{\n                                        readOnly: true,\n                                    }}/>\n                                    <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\"\n                                          sx={{marginTop: '10px', fontSize: '3rem'}}>\n                                        <FormControl component='fieldset'>\n                                            <FormLabel component='legend'>\n                                                <Typography\n                                                    sx={{color: 'white', justifyContent: 'center', fontWeight: 'bold'}}>Consenti\n                                                    a CivicLife di accedere a:</Typography>\n                                            </FormLabel>\n                                            <FormGroup aria-label='position' row>\n                                                <FormControlLabel control={\n                                                    <Android12Switch\n                                                        checked={vaccineAccess !== null ? vaccineAccess : false}\n                                                        onChange={handleVaccineAuthorizationChanged}\n                                                        inputProps={{'aria-label': 'controlled'}}\n                                                    />}\n                                                                  label=\"Vaccini?\"\n                                                                  labelPlacement={'top'}/>\n                                                <FormControlLabel control={\n                                                    <Android12Switch\n                                                        checked={bonusAccess !== null ? bonusAccess : false}\n                                                        onChange={handleBonusAuthorizationChanged}\n                                                        inputProps={{'aria-label': 'controlled'}}\n                                                    />}\n                                                                  label=\"Bonus?\"\n                                                                  labelPlacement={'top'}/>\n                                            </FormGroup>\n                                        </FormControl>\n                                    </Grid>\n\n                                </>\n                                :\n                                activeButton === buttons[1]  && vaccineAccess ?\n\n                                    vaccinesList.map((value, index) => {\n                                        return (\n                                            <>\n                                                <ListItemButton onClick={() => handleDialogOpen(value)}>\n                                                    <VaccinesIcon sx={{color: 'white', marginRight: '10px'}}/>\n                                                    <ListItemText primary={value.vaccineName}/>\n                                                </ListItemButton>\n                                                <Divider color={'black'}/>\n                                            </>\n                                        );\n                                    })\n                                    :\n                                    activeButton === buttons[2] && bonusAccess ?\n\n                                    bonusList.map((value, index) => {\n                                            return (\n                                                <>\n                                                    <ListItemButton key={value.id} onClick={() => handleDialogOpen(value)}>\n                                                        <AddBoxIcon sx={{color: 'white', marginRight: '10px'}}/>\n                                                        <ListItemText primary={value.name}/>\n                                                    </ListItemButton>\n                                                    <Divider color={'black'}/>\n                                                </>\n                                            );\n                                        }\n                                    ): null\n                            : null\n                    }\n\n                </List>\n\n            </Grid>\n            {\n\n                activeButton !== buttons[0] ? null\n                    :\n                    <Grid item xs={12} display=\"flex\" justifyContent='center' alignItems=\"right\">\n                        <Button style={{\n                            borderRadius: 35,\n                            backgroundColor: \"#92d36e\",\n                            padding: \"10px 20px\",\n                            fontSize: \"18px\",\n                            position:'fixed',\n                            bottom:30\n                        }}\n                                variant=\"contained\"\n                                onClick={() => {\n                                    handleOperation()\n                                }}>\n                            Salva\n                        </Button>\n                    </Grid>\n            }\n\n\n            <Dialog maxWidth={\"sm\"} fullWidth={true} open={clickedVaccine !== null} onClose={handleDialogClose}>\n                <DialogTitle>Dettagli vaccino</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                      secondaryTypographyProps={{fontSize: '15px'}}\n                                      primary={'Nome Vaccino:'} secondary={clickedVaccine ? clickedVaccine.vaccineName : null}/>\n                        <Divider/>\n\n                        <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                      secondaryTypographyProps={{fontSize: '15px'}}\n                                     primary={'Luogo Somministrazione:'}\n                                     secondary={clickedVaccine ? clickedVaccine.location : null}/>\n                        <Divider/>\n\n                        <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                      secondaryTypographyProps={{fontSize: '15px'}}\n                                      primary={'Data somministrazione:'}\n                                      secondary={clickedVaccine ? dayjs.unix(clickedVaccine.date).format('D MMMM YYYY').toString() : null}/>\n                        <Divider/>\n                        <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                      secondaryTypographyProps={{fontSize: '15px'}}\n                                      primary={'Descrizione Vaccino:'}\n                                      secondary={clickedVaccine ? clickedVaccine.description : null}/>\n                        <Divider/>\n                        <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                      secondaryTypographyProps={{fontSize: '15px'}}\n                                      primary={'Dose n°: '} secondary={clickedVaccine ? clickedVaccine.dose : null}/>\n                        <Divider/>\n                        <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                      secondaryTypographyProps={{fontSize: '15px'}}\n                                      primary={'Casa produttrice:'}\n                                      secondary={clickedVaccine ? clickedVaccine.manufacturer : null}/>\n                        <Divider/>\n                        <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                      secondaryTypographyProps={{fontSize: '15px'}}\n                                      primary={'Medico'} secondary={clickedVaccine ? clickedVaccine.doctor : null}/>\n                        <Divider/>\n                        <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                      secondaryTypographyProps={{fontSize: '15px'}}\n                                      primary={'Infermiere'} secondary={clickedVaccine ? clickedVaccine.nurse : null}/>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDialogClose}>Chiudi</Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog maxWidth={\"sm\"} fullWidth={true} open={clickedBonus !== null} onClose={handleDialogClose}>\n                <DialogTitle>Dettagli bonus</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                      secondaryTypographyProps={{fontSize: '15px'}}\n                                      primary={'Nome Bonus'} secondary={clickedBonus ? clickedBonus.name : null}/>\n                        <Divider/>\n                        <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                      secondaryTypographyProps={{fontSize: '15px'}}\n                                      primary={'Tipo Bonus'} secondary={clickedBonus ? clickedBonus.type : null}/>\n                        <Divider/>\n                        <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                      secondaryTypographyProps={{fontSize: '15px'}}\n                                      primary={'Data scadenza'}\n                                      secondary={clickedBonus ? dayjs.unix(clickedBonus.end_date).format('D MMMM YYYY').toString() : null}/>\n                        <Divider/>\n                        <ListItemText primaryTypographyProps={{fontWeight: 'bold'}}\n                                      secondaryTypographyProps={{fontSize: '15px'}}\n                                      primary={'Descrizione'}\n                                      secondary={clickedBonus ? clickedBonus.description : null}/>\n\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDialogClose}>Chiudi</Button>\n                </DialogActions>\n            </Dialog>\n            <Stack spacing={2} sx={{width: '100%'}}>\n                <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}\n                          anchorOrigin={{vertical: \"bottom\", horizontal: 'center'}}>\n                    <Alert onClose={handleClose} severity=\"success\" sx={{width: '100%'}}>\n                        {message}\n                    </Alert>\n                </Snackbar>\n            </Stack>\n        </Grid>\n    );\n}\n\nexport default PersonalData;\n","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Data/UsersAdmin.tsx",["158"],[],"import React, {useEffect, useState} from \"react\";\nimport {\n    AppBar,\n    Button,\n    Grid,\n    IconButton,\n    ListItemSecondaryAction,\n    ListItemText,\n    Tooltip,\n    Typography\n} from \"@mui/material\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport {getAllUsers, updateUserStatus, User, UserStatus} from \"../APIs/UsersAPI\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport AdminPanelSettingsIcon from '@mui/icons-material/AdminPanelSettings';\nimport {isInstanceOfAuthError, logoutUser, TokenData} from \"../APIs/OauthAPI\";\nimport DeselectIcon from '@mui/icons-material/Deselect';\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\n\nconst UsersAdmin = () => {\n    const location = useLocation();\n    const navigate = useNavigate()\n    const tokenData : TokenData= location.state.token;\n    const [usersList, setUsersList] = useState<User[]>([])\n    const [selectedUser, setSelectedUser] = useState<User | null>(null)\n    const [firstLoad, setFirstLoad] = useState(true)\n\n    const getUsers = async () => {\n        const response = await getAllUsers(tokenData)\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setUsersList(response)\n        }\n\n    }\n\n    useEffect(() => {\n        if (firstLoad) {\n            getUsers()\n        }\n        setFirstLoad(false)\n    })\n\n    const handleUserClick = (user: any) => {\n        setSelectedUser(user)\n    }\n\n    const handleStatus = async (newStatus: UserStatus) => {\n        if (selectedUser !== null) {\n            const userUpdateResponse = await updateUserStatus(tokenData, newStatus, selectedUser.email)\n            if (typeof userUpdateResponse === 'boolean') {\n                if (userUpdateResponse) {\n                    getUsers()\n                } else {\n                    console.log('error')\n                }\n            } else {\n                navigate('/error', {state: {error: userUpdateResponse}})\n            }\n        }\n    }\n\n    const statusTyphografy = (status: UserStatus) => {\n        if (status === UserStatus.ACTIVE) {\n            return <Typography sx={{color: 'green'}}>Attivo</Typography>\n        } else if (status === UserStatus.SUSPENDED) {\n            return <Typography sx={{color: 'orange'}}>Sospeso</Typography>\n        } else if (status === UserStatus.BANNED) {\n            return <Typography sx={{color: 'red'}}>Bannato</Typography>\n        }\n    }\n\n    const logout = async () => {\n        if (tokenData !== null) {\n            const response = await logoutUser(tokenData)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    navigate('/')\n                } else {\n                    console.log('error')\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n    }\n\n    const goBack = () => {\n        navigate(-1)\n    }\n\n    return (\n        <Grid container direction=\"row\">\n            <Grid item xs={12} justifyContent=\"center\" alignItems=\"center\">\n                <Box sx={{flexGrow: 1}}>\n                    <AppBar position=\"fixed\" sx={{backgroundColor: '#3d4347'}}>\n                        <Toolbar>\n                            <IconButton\n                                size=\"small\"\n                                edge=\"start\"\n                                aria-label=\"menu\"\n                                sx={{mr: 2}}\n                            >\n                                <ArrowBackIcon onClick={goBack} style={{fontSize: '3rem', color: 'white'}}/>\n                            </IconButton>\n                            <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}\n                                        style={{\n                                            justifyContent: 'center',\n                                            color: 'white',\n                                            textAlign: 'center',\n                                            fontSize: '1.8rem',\n                                        }}>Amministrazione utenti\n                            </Typography>\n                            <Button sx={{color: 'white', backgroundColor: 'red'}}\n                                    onClick={logout}>\n                                logout\n                            </Button>\n                        </Toolbar>\n                    </AppBar>\n                </Box>\n            </Grid>\n            <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <List sx={{\n                    width: '80%',\n                    overflow: 'auto',\n                    maxHeight: 580,\n                    position: 'fixed',\n                    top: 150,\n                    bottom: 100\n                }}>\n\n                    <Tooltip title=\"deseleziona\" placement=\"right\">\n                            <span>\n                                <IconButton size={'small'} color=\"primary\" disabled={selectedUser === null}\n                                    onClick={() => setSelectedUser(null)}><DeselectIcon/></IconButton>\n                            </span>\n                    </Tooltip>\n\n\n                    {usersList.map((value, index) => {\n                        return (\n                            <ListItem key={index} onClick={() => handleUserClick(value)}>\n                                {\n                                    value.admin ? <AdminPanelSettingsIcon sx={{color: '#feac0d'}}/> :\n                                        <AccountCircleIcon sx={{color: selectedUser === value ? 'green' : 'white'}}/>\n                                }\n                                <ListItemButton sx={{color: selectedUser === value ? 'green' : 'white'}}>\n                                    <ListItemText primary={<Typography\n                                        sx={{fontSize: '1.2rem', fontWeight: 'bold'}}>{value.name}</Typography>}\n                                                  secondary={<Typography\n                                                      sx={{fontSize: '0.8rem'}}>{value.email}</Typography>}/>\n                                </ListItemButton>\n                                <ListItemSecondaryAction>{statusTyphografy(value.status)}</ListItemSecondaryAction>\n                            </ListItem>\n                        );\n                    })}\n                </List>\n            </Grid>\n\n            <Grid item xs={4} display=\"flex\" justifyContent='center' alignItems=\"right\">\n                <Button\n                    disabled={selectedUser === null || selectedUser.status === UserStatus.BANNED || selectedUser.admin}\n                    style={{\n                        position: 'fixed',\n                        bottom: 40,\n                        borderRadius: 35,\n                        backgroundColor: \"red\",\n                        padding: \"10px 20px\",\n                        fontSize: \"18px\"\n                    }}\n                    variant=\"contained\"\n                    onClick={() => {\n                        handleStatus(UserStatus.BANNED)\n                    }}>\n                    Banna\n                </Button>\n            </Grid>\n            <Grid item xs={4} display=\"flex\" justifyContent='center' alignItems=\"right\">\n                <Button\n                    disabled={selectedUser === null || selectedUser.status === UserStatus.SUSPENDED || selectedUser.admin}\n                    style={{\n                        position: 'fixed',\n                        bottom: 40,\n                        borderRadius: 35,\n                        backgroundColor: \"#feac0d\",\n                        padding: \"10px 20px\",\n                        fontSize: \"18px\"\n                    }}\n                    variant=\"contained\"\n                    onClick={() => {\n                        handleStatus(UserStatus.SUSPENDED)\n                    }}>\n                    Sospendi\n                </Button>\n            </Grid>\n            <Grid item xs={4} display=\"flex\" justifyContent='center' alignItems=\"right\">\n                <Button\n                    disabled={selectedUser === null || selectedUser.status === UserStatus.ACTIVE || selectedUser.admin}\n                    style={{\n                        position: 'fixed',\n                        bottom: 40,\n                        borderRadius: 35,\n                        backgroundColor: \"green\",\n                        padding: \"10px 20px\",\n                        fontSize: \"18px\"\n                    }}\n                    variant=\"contained\"\n                    onClick={() => {\n                        handleStatus(UserStatus.ACTIVE)\n                    }}>\n                    Attiva\n                </Button>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default UsersAdmin;","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Initiative/Initiatives.tsx",["159","160","161","162"],[],"import {\n    AppBar,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Grid,\n    IconButton,\n    ToggleButton,\n    ToggleButtonGroup,\n    Typography\n} from \"@mui/material\";\nimport '../App.css'\nimport React, {useEffect, useState} from \"react\";\nimport List from \"@mui/material/List\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport {\n    getAllInitiatives,\n    getInitiativesForVisitor,\n    getMyInitiatives,\n    getOrganizedInitiatives,\n    getSubscribedInitiatives,\n    Initiative,\n    InitiativeNameDesc,\n    InitiativeTypeColor\n} from \"../APIs/InitiativeAPI\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport {isInstanceOfAuthError, logoutUser, TokenData} from \"../APIs/OauthAPI\";\nimport {User, UserStatus} from \"../APIs/UsersAPI\";\nimport {activeButtonColor, ButtonStyleType, inactiveButtonColor} from \"../Utils/CustomComponents\";\n\n\nconst Initiatives = () => {\n    const navigate = useNavigate()\n    const location = useLocation()\n    const tokenData: TokenData = location.state.token\n    const isVisitor: boolean = location.state.isVisitor\n    const user : User= location.state.user\n    const buttons = ['Tutte', 'Mie', 'Sottoscritte', 'Organizzate']\n    const [allInitiativesList, setAllInitiativesList] = useState<Initiative[] | null>(null)\n    const [myInitiativesList, setMyInitiativesList] = useState<Initiative[] | null>(null)\n    const [readOnlyInitiativeList, setReadOnlyInitiativeList] = useState<InitiativeNameDesc[] | null>(null)\n    const [subscribedInitiativesList, setSubscribedInitiativesList] = useState<Initiative[] | null>(null)\n    const [organizedInitiativesList, setOrganizedInitiativesList] = useState<Initiative[] | null>(null)\n    const [activeButton, setActiveButton] = useState(buttons[0]);\n    const [clickedInitiative, setClickedInitiative] = useState(null)\n    const [firstButton, setFirstButton] = useState<ButtonStyleType>(activeButtonColor)\n    const [secondButton, setSecondButton] = useState<ButtonStyleType>(inactiveButtonColor)\n    const [thirdButton, setThirdButton] = useState<ButtonStyleType>(inactiveButtonColor)\n    const [fourthButton, setFourthButton] = useState<ButtonStyleType>(inactiveButtonColor)\n    const [firstLoad, setFirstLoad] = useState(true)\n    const [buttonChanged, setButtonChanged] = useState(false)\n\n    const getInitiatives = async () => {\n        const response = await getAllInitiatives(tokenData)\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            console.log(response)\n            setAllInitiativesList(response)\n        }\n    }\n\n    const getInitiativesReadOnly = async () => {\n        const response = await getInitiativesForVisitor()\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setReadOnlyInitiativeList(response)\n        }\n    }\n\n    const getMy = async () => {\n        const response = await getMyInitiatives(tokenData)\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setMyInitiativesList(response)\n        }\n    }\n\n    const getSubscribed= async () => {\n        const response = await getSubscribedInitiatives(tokenData)\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setSubscribedInitiativesList(response)\n        }\n    }\n\n    const getOrganized = async () => {\n        const response = await getOrganizedInitiatives(tokenData)\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setOrganizedInitiativesList(response)\n        }\n    }\n\n\n\n    useEffect(() => {\n        if (firstLoad) {\n            if (allInitiativesList === null) {\n                if (isVisitor===true) {\n                    getInitiativesReadOnly()\n                } else {\n                    getInitiatives()\n\n                }\n            }\n        }\n        setFirstLoad(false)\n    }, [])\n\n    useEffect(() => {\n        if (buttonChanged) {\n            if (activeButton === buttons[0]) {\n                getInitiatives()\n            }\n            if (activeButton === buttons[1]) {\n                getMy()\n            }\n            if (activeButton === buttons[2]) {\n                getSubscribed()\n            }\n            if (activeButton === buttons[3]) {\n                getOrganized()\n            }\n        }\n        setButtonChanged(true)\n    }, [activeButton])\n\n    const handleInitiativeDetailsOpen = (value: any) => {\n        navigate('/initiativeDetails', {\n            state: {\n                token: tokenData,\n                isVisitor: isVisitor,\n                user: user,\n                initiative: value\n            }\n        })\n    }\n\n\n    const handleCreateInitiative = () => {\n        navigate('/createInitiative', {\n            state: {\n                token: tokenData,\n            }\n        })\n    }\n\n    const handleChange = (event: React.MouseEvent<HTMLElement>, newActiveButton: string,) => {\n        if (newActiveButton === buttons[0]) {\n            setFirstButton(activeButtonColor)\n            setSecondButton(inactiveButtonColor)\n            setThirdButton(inactiveButtonColor)\n            setFourthButton(inactiveButtonColor)\n        } else if (newActiveButton === buttons[1]) {\n            setFirstButton(inactiveButtonColor)\n            setSecondButton(activeButtonColor)\n            setThirdButton(inactiveButtonColor)\n            setFourthButton(inactiveButtonColor)\n        } else if (newActiveButton === buttons[2]) {\n            setFirstButton(inactiveButtonColor)\n            setSecondButton(inactiveButtonColor)\n            setThirdButton(activeButtonColor)\n            setFourthButton(inactiveButtonColor)\n        } else if (newActiveButton === buttons[3]) {\n            setFirstButton(inactiveButtonColor)\n            setSecondButton(inactiveButtonColor)\n            setThirdButton(inactiveButtonColor)\n            setFourthButton(activeButtonColor)\n        }\n        setActiveButton(newActiveButton);\n    }\n\n    const logout = async () => {\n        if (tokenData !== null) {\n            const response = await logoutUser(tokenData)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    navigate('/')\n                } else {\n                    console.log('error')\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n    }\n\n    const goBack = () => {\n        navigate(-1)\n    }\n\n    const login = () => {\n        window.location.assign('http://localhost:8080/login')\n    }\n\n    return (\n        <>\n            <Grid container direction=\"row\" spacing={2}>\n                <Grid item xs={12} justifyContent=\"center\" alignItems=\"center\">\n                    <Box sx={{flexGrow: 1}}>\n                        <AppBar position=\"fixed\" sx={{backgroundColor: '#3d4347'}}>\n                            <Toolbar>\n                                <IconButton\n                                    size=\"small\"\n                                    edge=\"start\"\n                                    aria-label=\"menu\"\n                                    sx={{mr: 2}}\n                                >\n                                    <ArrowBackIcon onClick={goBack} sx={{fontSize: '3rem', color: 'white'}}/>\n                                </IconButton>\n\n                                <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}\n                                            style={{\n                                                justifyContent: 'center',\n                                                color: '#feac0d',\n                                                textAlign: 'center',\n                                                fontSize: '1.8rem',\n                                            }}>\n                                    {user && user.admin ? 'Amministrazione iniziative' : 'Iniziative'}\n                                </Typography>\n                                <Button\n                                    onClick={isVisitor ? login : logout}\n                                    style={{\n                                        color:'white',\n                                        backgroundColor: isVisitor? \"green\" : \"red\",\n                                    }}>\n\n                                    {isVisitor? \"login\" : \"logout\"}\n                                </Button>\n                            </Toolbar>\n                        </AppBar>\n                    </Box>\n                </Grid>\n                {user && !user.admin ?\n                    <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\"\n                          sx={{position: 'fixed', top: '8%', margin: 'auto', width: '100%'}}>\n                        <ToggleButtonGroup value={activeButton} exclusive onChange={handleChange} aria-label=\"Platform\">\n                            <ToggleButton style={{\n                                backgroundColor: firstButton.background,\n                                color: firstButton.color,\n                                borderColor: '#000000',\n                                fontSize: 'calc(15px+0.40vw)'\n                            }} value={buttons[0]}>{buttons[0]}</ToggleButton>\n                            <ToggleButton style={{\n                                backgroundColor: secondButton.background,\n                                color: secondButton.color,\n                                borderColor: '#000000',\n                                fontSize: 'calc(15px+0.40vw)'\n                            }} value={buttons[1]}>{buttons[1]}</ToggleButton>\n                            <ToggleButton style={{\n                                backgroundColor: thirdButton.background,\n                                color: thirdButton.color,\n                                borderColor: '#000000',\n                                fontSize: 'calc(15px+0.40vw)'\n                            }} value={buttons[2]}>{buttons[2]}</ToggleButton>\n                            <ToggleButton style={{\n                                backgroundColor: fourthButton.background,\n                                color: fourthButton.color,\n                                borderColor: '#000000',\n                                fontSize: 'calc(15px+0.40vw)'\n                            }} value={buttons[3]}>{buttons[3]}</ToggleButton>\n                        </ToggleButtonGroup>\n                    </Grid>\n                    : null}\n\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <List sx={{\n                        width: '91%',\n                        overflow: 'auto',\n                        maxHeight: 550,\n                        position: 'fixed',\n                        top: '20%',\n                        bottom: '1%'\n                    }}>\n                        {\n                            isVisitor && readOnlyInitiativeList ?\n                                readOnlyInitiativeList.map((value) => {\n                                    return (\n                                        <Card sx={{maxWidth:'100%', margin:'50px',\"&:hover\": {\n                                                background: \"#d7d7d7\"\n                                            }}}>\n                                            <CardHeader sx={{backgroundColor: InitiativeTypeColor[value.type]}}\n                                                title={value.name}\n                                                subheader={value.location}\n                                            />\n                                            <CardContent>\n                                                <Typography sx={{fontWeight:'bold'}}variant=\"body2\" color=\"text.secondary\">\n                                                    {value.type}\n                                                </Typography>\n                                                <Typography variant=\"body1\" color=\"text.secondary\">\n                                                    {value.description}\n                                                </Typography>\n                                            </CardContent>\n                                        </Card>\n\n                                    )\n                                })\n                                :\n                            (activeButton === buttons[0]) && allInitiativesList ?\n                                allInitiativesList.map((value) => {\n                                    return (\n                                        <Card sx={{maxWidth:'100%', margin:'50px',\"&:hover\": {\n                                                background: \"#d7d7d7\"\n                                            }}} onClick={()=>handleInitiativeDetailsOpen(value)}>\n                                            <CardHeader sx={{backgroundColor: InitiativeTypeColor[value.type]}}\n                                                        title={value.name}\n                                                        subheader={value.location}\n                                            />\n                                            <CardContent>\n                                                <Typography sx={{fontWeight:'bold'}}variant=\"body2\" color=\"text.secondary\">\n                                                    {value.type}\n                                                </Typography>\n                                                <Typography variant=\"body1\" color=\"text.secondary\">\n                                                    {value.description}\n                                                </Typography>\n                                            </CardContent>\n                                        </Card>\n                                    );\n                                })\n                                :\n                                activeButton === buttons[1] && myInitiativesList ?\n                                    myInitiativesList.map((value) => {\n                                        return (\n                                            <Card sx={{maxWidth:'100%', margin:'50px',\"&:hover\": {\n                                                    background: \"#d7d7d7\"\n                                                }}} onClick={()=>handleInitiativeDetailsOpen(value)}>\n                                                <CardHeader sx={{backgroundColor: InitiativeTypeColor[value.type]}}\n                                                            title={value.name}\n                                                            subheader={value.location}\n                                                />\n                                                <CardContent>\n                                                    <Typography sx={{fontWeight:'bold'}}variant=\"body2\" color=\"text.secondary\">\n                                                        {value.type}\n                                                    </Typography>\n                                                    <Typography variant=\"body1\" color=\"text.secondary\">\n                                                        {value.description}\n                                                    </Typography>\n                                                </CardContent>\n                                            </Card>\n                                        );\n                                    })\n                                    :\n                                    activeButton === buttons[2] && subscribedInitiativesList ?\n                                        subscribedInitiativesList.map((value) => {\n                                            return (\n                                                <Card sx={{maxWidth:'100%', margin:'50px',\"&:hover\": {\n                                                        background: \"#d7d7d7\"\n                                                    }}} onClick={()=>handleInitiativeDetailsOpen(value)}>\n                                                    <CardHeader sx={{backgroundColor: InitiativeTypeColor[value.type]}}\n                                                                title={value.name}\n                                                                subheader={value.location}\n                                                    />\n                                                    <CardContent>\n                                                        <Typography sx={{fontWeight:'bold'}}variant=\"body2\" color=\"text.secondary\">\n                                                            {value.type}\n                                                        </Typography>\n                                                        <Typography variant=\"body1\" color=\"text.secondary\">\n                                                            {value.description}\n                                                        </Typography>\n                                                    </CardContent>\n                                                </Card>\n                                            );\n                                        }) : activeButton === buttons[3] && organizedInitiativesList ?\n                                            organizedInitiativesList.map((value) => {\n                                                return (\n                                                    <Card sx={{maxWidth:'100%', margin:'50px',\"&:hover\": {\n                                                            background: \"#d7d7d7\"\n                                                        }}} onClick={()=>handleInitiativeDetailsOpen(value)}>\n                                                        <CardHeader sx={{backgroundColor: InitiativeTypeColor[value.type]}}\n                                                                    title={value.name}\n                                                                    subheader={value.location}\n                                                        />\n                                                        <CardContent>\n                                                            <Typography sx={{fontWeight:'bold'}}variant=\"body2\" color=\"text.secondary\">\n                                                                {value.type}\n                                                            </Typography>\n                                                            <Typography variant=\"body1\" color=\"text.secondary\">\n                                                                {value.description}\n                                                            </Typography>\n                                                        </CardContent>\n                                                    </Card>\n                                                );\n                                            }) : null\n                        }\n                    </List>\n                </Grid>\n                <Grid item xs={12} display=\"flex\" justifyContent='center' alignItems=\"right\">\n                    {\n                        isVisitor || (user && user.admin) ?\n                            null\n                            :\n                            <Button\n                                disabled={user.status===UserStatus.SUSPENDED}\n                                onClick={handleCreateInitiative}\n                                style={{\n                                    position: 'fixed',\n                                    bottom: 20,\n                                    marginTop: '15px',\n                                    borderRadius: 35,\n                                    backgroundColor: \"#92d36e\",\n                                    padding: \"18px 36px\",\n                                    fontSize: \"15px\"\n                                }}\n                                variant=\"contained\">\n                                CREA\n                            </Button>\n                    }\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\nexport default Initiatives;\n","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Initiative/initiativeDetails.tsx",["163","164","165"],[],"import {AppBar, Button, Chip, Grid, IconButton, Typography,} from \"@mui/material\";\nimport '../App.css'\nimport React, {useEffect, useState} from \"react\";\nimport Box from '@mui/material/Box';\nimport {CssTextField} from \"../Utils/CustomComponents\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport {isInstanceOfAuthError, logoutUser, TokenData} from \"../APIs/OauthAPI\";\nimport AccountCircleIcon from \"@mui/icons-material/AccountCircle\";\nimport FormControl from \"@mui/material/FormControl\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport {getAllUsersEmail, User, UserStatus} from \"../APIs/UsersAPI\";\nimport dayjs, {Dayjs} from \"dayjs\";\nimport {\n    changeOrganizers,\n    deleteInitiative,\n    getInitiativeByID,\n    Initiative,\n    InitiativeType,\n    InitiativeTypeColor,\n    modifyInitiative,\n    subscribeInitiative,\n    unsubscribeInitiative\n} from \"../APIs/InitiativeAPI\";\nimport {AdapterDayjs} from \"@mui/x-date-pickers/AdapterDayjs\";\nimport {DatePicker, LocalizationProvider} from \"@mui/x-date-pickers\";\nimport MuiAlert, {AlertProps} from \"@mui/material/Alert\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport Stack from \"@mui/material/Stack\";\n\n\nconst InitiativeDetails = () => {\n    const location = useLocation()\n    const initiativePassed : Initiative= location.state.initiative\n    const tokenData: TokenData = location.state.token\n    const user :User= location.state.user\n    const isVisitor : boolean= location.state.isVisitor\n    const navigate = useNavigate()\n\n    const [initiative, setInitiative] = useState<Initiative | null>(null)\n\n    const [modifiedDescription, setModifiedDescription] = useState<string | null>(null)\n    const [usersList, setUsersList] = useState<string[] | null>(null)\n    const [modifiedSelectedUsers, setModifiedSelectedUsers] = useState<string[] | null>(null)\n    const [modifiedStartDate, setModifiedStartDate] = useState<Dayjs | null>(null)\n    const [modifiedEndDate, setModifiedEndDate] = useState<Dayjs | null>(null)\n    const [initiativeType, setInitiativeType] = useState<InitiativeType | null>(null)\n\n    const getUsers = async () => {\n        const response = await getAllUsersEmail(tokenData)\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setUsersList(response)\n        }\n    }\n\n    const getInitiative = async (): Promise<boolean> => {\n        const response = await getInitiativeByID(tokenData, initiativePassed.id)\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setModifiedDescription(response.description)\n            setModifiedSelectedUsers(response.idOrganizers)\n            setModifiedStartDate(dayjs.unix(response.startDate))\n            setModifiedEndDate(dayjs.unix(response.endDate))\n            setInitiativeType(InitiativeType[response.type])\n            setInitiative(response)\n            return true\n        }\n        return false\n\n    }\n\n    useEffect(() => {\n        if (!initiative) {\n            getInitiative()\n        }\n    }, [])\n\n    useEffect(() => {\n        if (initiative) {\n            //set all\n\n\n            if (usersList === null && !isVisitor && user.email === initiative.idCreator) {\n                getUsers()\n            }\n        }\n\n    }, [initiative])\n\n    const somethingChanged = async (message?: string) => {\n        const response = await getInitiative()\n        if (response) {\n            if (message) {\n                setOpen(true)\n                setMessage(message)\n            }\n        } else if (!response) {\n            setOpenError(true)\n            setMessageError(\"Errore nel caricamento dei dati\")\n        } else {\n            navigate('/error', {state: {error: response}})\n        }\n    }\n\n\n    const handleStartDateChanged = (newValue: Dayjs | null) => {\n        if (dayjs(newValue, 'DD/MM/YYYY', true).isValid()) {\n            setModifiedStartDate(newValue);\n        } else {\n            console.log(\"Invalid date\")\n        }\n    }\n\n    const handleEndDateChanged = (newValue: Dayjs | null) => {\n        if (dayjs(newValue, 'DD/MM/YYYY', true).isValid()) {\n            setModifiedEndDate(newValue);\n        } else {\n            console.log(\"Invalid date\")\n        }\n    }\n\n    const userIsOrganizer = () => {\n        if (initiative) {\n            return (initiative.idOrganizers.includes(user.email));\n        }\n        return false;\n    }\n\n    const isReadOnly = () => {\n        if (initiative) {\n            if (userIsOrganizer()) {\n                return false\n            } else return user.email !== initiative.idCreator;\n        }\n    }\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setModifiedDescription(event.target.value)\n    }\n\n    function toTimestamp(strDate: string) {\n        const datum = Date.parse(strDate);\n        return datum / 1000;\n    }\n\n    function checkDataChanged(date: Dayjs | null, oldDate: number) {\n        if (date === null) {\n            return false\n        } else {\n            return date.unix() !== oldDate\n        }\n    }\n\n    const handleModify = async () => {\n        if (initiative) {\n            if (!isReadOnly()) {\n                if (initiative.description !== modifiedDescription ||\n                    checkDataChanged(modifiedStartDate, initiative.startDate) ||\n                    checkDataChanged(modifiedEndDate, initiative.endDate)) {\n\n                    const newInitiative: Initiative = {\n                        id: initiative.id,\n                        idCreator: initiative.idCreator,\n                        idOrganizers: initiative.idOrganizers,\n                        description: modifiedDescription && (initiative.description !== modifiedDescription) ? modifiedDescription : initiative.description,\n                        startDate: modifiedStartDate && checkDataChanged(modifiedStartDate, initiative.startDate) ? toTimestamp(modifiedStartDate.toString()) : initiative.startDate,\n                        endDate: modifiedEndDate && checkDataChanged(modifiedEndDate, initiative.endDate) ? toTimestamp(modifiedEndDate.toString()) : initiative.endDate,\n                        type: initiative.type,\n                        idMembers: initiative.idMembers,\n                        location: initiative.location,\n                        name: initiative.name,\n                    }\n                    const response = await modifyInitiative(tokenData, newInitiative)\n                    if (typeof response === 'boolean') {\n                        if (response) {\n                            somethingChanged(\"Dati iniziative modificati con successo\")\n                        } else {\n                            setOpenError(true)\n                            setMessageError(\"Non è stato possibile modificare gli organizzatori\")\n                        }\n                    } else {\n                        navigate('/error', {state: {error: response}})\n\n                    }\n                }\n                if (modifiedSelectedUsers && modifiedSelectedUsers.length > 0) {\n                    if (initiative.idOrganizers !== modifiedSelectedUsers) {\n                        if (user.email === initiative.idCreator || userIsOrganizer()) {\n                            const response = await changeOrganizers(tokenData, initiative.id, modifiedSelectedUsers)\n                            if (typeof response === 'boolean') {\n                                if (response) {\n                                    somethingChanged(\"Organizzatori modificati con successo\")\n                                } else {\n                                    setOpenError(true)\n                                    setMessageError(\"Non è stato possibile modificare gli organizzatori\")\n                                }\n                            } else {\n                                navigate('/error', {state: {error: response}})\n                            }\n                        } else {\n                            console.log('non puoi')\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n    const logout = async () => {\n        if (tokenData !== null) {\n            const response = await logoutUser(tokenData)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    navigate('/')\n                } else {\n                    console.log('error')\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n    }\n\n    const goBack = () => {\n        navigate(-1)\n    }\n\n    const handleUserAdd = (user: any) => {\n        if (modifiedSelectedUsers) {\n            if (!modifiedSelectedUsers.includes(user)) {\n                setModifiedSelectedUsers([...modifiedSelectedUsers, user])\n            }\n        }\n    }\n\n    const handleDelete = (userToDelete: any) => () => {\n        if (modifiedSelectedUsers) {\n            setModifiedSelectedUsers(modifiedSelectedUsers.filter((user) => user !== userToDelete))\n        }\n    };\n\n    const handleSubscribe = async () => {\n\n        if (initiative) {\n            const response = await subscribeInitiative(tokenData, initiative.id)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    somethingChanged('Iscrizione avvenuta con successo')\n                } else {\n                    setOpenError(true)\n                    setMessageError('Non è stato possibile iscriverti')\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n\n    }\n\n    const handleUnSubscribe = async () => {\n        if (initiative) {\n            const response = await unsubscribeInitiative(tokenData, initiative.id)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    somethingChanged('Sei stato rimosso dall\\'iniziative')\n                } else {\n                    setOpenError(true)\n                    setMessageError(\"Non è stato possibile cancellare la tua iscrizione\")\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n    }\n\n    const [open, setOpen] = useState(false);\n    const [message, setMessage] = useState<string>('')\n    const [openError, setOpenError] = useState(false);\n    const [messageError, setMessageError] = useState<string>('')\n\n\n    const handleClickError = () => {\n        setOpenError(true);\n    }\n\n    const handleCloseError = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpenError(false);\n    }\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpen(false);\n    };\n\n    const Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n        props,\n        ref,\n    ) {\n        return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n    });\n\n    const handleDeleteInitiative = async () => {\n        if (initiative) {\n            const response = await deleteInitiative(tokenData, initiative.id)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    navigate(-1)\n                } else {\n                    setOpenError(true)\n                    setMessageError(\"Non è stato possibile eliminare l'iniziativa\")\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n    }\n\n\n    return (\n        <>\n            {\n                initiative ?\n                    <><Grid item xs={12} justifyContent=\"center\" alignItems=\"center\">\n                        <Box sx={{flexGrow: 1}}>\n                            <AppBar position=\"fixed\" sx={{backgroundColor: '#3d4347'}}>\n                                <Toolbar>\n                                    <IconButton\n                                        size=\"small\"\n                                        edge=\"start\"\n                                        aria-label=\"menu\"\n                                        sx={{mr: 2}}\n                                    >\n                                        <ArrowBackIcon onClick={goBack} sx={{fontSize: '3rem', color: 'white'}}/>\n                                    </IconButton>\n                                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}\n                                                style={{\n                                                    justifyContent: 'center',\n                                                    color: 'white',\n                                                    textAlign: 'center',\n                                                    fontSize: '1.8rem',\n                                                }}>Dettagli initiativa\n                                    </Typography>\n                                    <Button sx={{color: 'white', backgroundColor: 'red'}}\n                                            onClick={logout}>\n                                        logout\n                                    </Button>\n                                </Toolbar>\n                            </AppBar>\n                        </Box>\n                    </Grid>\n\n                        <Grid container display=\"flex\" justifyContent=\"flex-start\" alignItems=\"center\"\n                              sx={{width: '100%', marginTop: '65px'}} spacing={3}>\n\n                            <Grid item xs={12}>\n                                <Typography\n                                    style={{\n                                        justifyContent: 'center',\n                                        color: 'white',\n                                        textAlign: 'center',\n                                        fontSize: '1.8rem',\n                                    }}>{initiative.name}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Typography sx={{\n                                    color: initiativeType ? InitiativeTypeColor[initiativeType] : null,\n                                    fontWeight: 'bold',\n                                    fontSize: '1.2rem'\n                                }}>{initiative.type}</Typography>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <Box sx={{width: '100%', height: '100%', border: '2.5px solid #feac0d',}}>\n                                    <CssTextField\n                                        sx={{width: '100%', height: '100%',}}\n                                        value={modifiedDescription}\n                                        maxRows={5}\n                                        onChange={handleChange}\n                                        multiline\n                                        InputProps={{\n                                            readOnly: isReadOnly(),\n                                            inputProps: {\n                                                style: {\n                                                    color: 'white',\n                                                }\n                                            }\n                                        }}/>\n                                </Box>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <Box sx={{width: 1}}>\n                                    <Box display=\"grid\" gridTemplateColumns=\"repeat(12, 1fr)\" gap={2}>\n                                        <Box gridColumn=\"span 6\">\n                                            <LocalizationProvider dateAdapter={AdapterDayjs}>\n                                                <DatePicker\n                                                    inputFormat=\"DD/MM/YYYY\"\n                                                    label='Data inizio'\n                                                    value={modifiedStartDate}\n                                                    onChange={!isReadOnly() ? (newValue) => {\n                                                        handleStartDateChanged(newValue);\n                                                    } : () => {\n                                                        console.log('non puoi');\n                                                    }}\n                                                    renderInput={(params) => <CssTextField {...params} sx={{\n                                                        input: {color: 'white'},\n                                                        style: {color: 'white'}\n                                                    }}/>}/>\n                                            </LocalizationProvider>\n                                        </Box>\n                                        <Box gridColumn=\"span 6\">\n                                            <LocalizationProvider dateAdapter={AdapterDayjs}>\n                                                <DatePicker\n                                                    inputFormat=\"DD/MM/YYYY\"\n                                                    label=\"Data fine\"\n                                                    value={modifiedEndDate}\n                                                    onChange={!isReadOnly() ? (newValue) => {\n                                                        handleEndDateChanged(newValue);\n                                                    } : () => {\n                                                        console.log('non puoi');\n                                                    }}\n                                                    renderInput={(params) => <CssTextField {...params} sx={{\n                                                        input: {color: 'white'},\n                                                        style: {color: 'white'}\n                                                    }}/>}/>\n                                            </LocalizationProvider>\n                                        </Box>\n                                    </Box>\n                                </Box>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <Typography sx={{textAlign: \"center\"}}>Creatore: </Typography>\n                            </Grid>\n                            <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                                <Chip sx={{backgroundColor: '#feac0d'}}\n                                      icon={<AccountCircleIcon sx={{color: 'white'}}/>}\n                                      label={initiative.idCreator}/>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Typography sx={{textAlign: \"center\"}}>Organizzatori: </Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                {modifiedSelectedUsers ? modifiedSelectedUsers.map((organizer: string) => {\n                                    return (\n                                        <Grid item display=\"flex\" xs={12} justifyContent=\"center\" alignItems=\"center\">\n                                            <Chip sx={{\n                                                backgroundColor: '#feac0d',\n                                                marginTop: '10px',\n                                                textAlign: 'center'\n                                            }}\n                                                  icon={<AccountCircleIcon sx={{color: 'white'}}/>}\n                                                  label={organizer}\n                                                  onDelete={organizer === user.email || user.email === initiative.idCreator ? handleDelete(organizer) : undefined}/>\n                                        </Grid>);\n                                }) : null}\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Typography sx={{textAlign: \"center\"}}>Sottoscrizioni: </Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                {initiative.idMembers.map((member: string) => {\n                                    return (\n                                        <Grid item display=\"flex\" xs={12} justifyContent=\"center\" alignItems=\"center\">\n                                            <Chip sx={{\n                                                backgroundColor: '#feac0d',\n                                                marginTop: '10px',\n                                                textAlign: 'center'\n                                            }}\n                                                  icon={<AccountCircleIcon sx={{color: 'white'}}/>}\n                                                  label={member}/>\n                                        </Grid>);\n                                })}\n                            </Grid>\n                            {user && user.email === initiative.idCreator && !isVisitor ?\n                                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                                    <FormControl sx={{width: '70%'}}>\n                                        <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}}}\n                                                      select\n                                                      label='Organizzatori' InputProps={{inputProps: {style: {color: 'white',}}}}>\n\n                                            {usersList ? usersList.map((user) => {return (<MenuItem onClick={() => {handleUserAdd(user);}} value={user}>{user}</MenuItem>)}) : null}\n                                        </CssTextField>\n                                    </FormControl>\n                                </Grid>\n                                :\n                                null\n                            }\n                            <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                                {isVisitor ? null : user.admin ?\n                                    null\n                                    :\n                                    initiative.idCreator === user.email ?\n                                        <>\n                                            <Button\n                                                disabled={user.status === UserStatus.SUSPENDED}\n                                                style={{\n                                                    borderRadius: 35,\n                                                    backgroundColor: \"#92d36e\",\n                                                    padding: \"10px 20px\",\n                                                    fontSize: \"15px\",\n                                                    marginBottom: '20px'\n                                                }}\n                                                onClick={handleModify} variant=\"contained\">\n                                                Modifica\n                                            </Button>\n                                            <Button style={{\n                                                borderRadius: 35,\n                                                backgroundColor: \"red\",\n                                                padding: \"10px 20px\",\n                                                fontSize: \"15px\",\n                                                marginLeft: '30px',\n                                                marginBottom: '20px'\n                                            }} disabled={user.status === UserStatus.SUSPENDED}\n                                                    variant=\"contained\"\n                                                    onClick={handleDeleteInitiative}\n                                            >\n                                                Cancella\n                                            </Button>\n                                        </>\n                                        :\n                                        userIsOrganizer() ?\n                                            <Button\n                                                disabled={user.status === UserStatus.SUSPENDED}\n                                                style={{\n                                                    borderRadius: 35,\n                                                    backgroundColor: \"#92d36e\",\n                                                    padding: \"10px 20px\",\n                                                    fontSize: \"15px\",\n                                                    marginBottom: '20px'\n                                                }}\n                                                onClick={handleModify} variant=\"contained\">\n                                                Modifica\n                                            </Button>\n                                            :\n                                            !initiative.idMembers.includes(user.email) ?\n                                                <Button style={{\n                                                    borderRadius: 35,\n                                                    backgroundColor: \"#92d36e\",\n                                                    padding: \"10px 20px\",\n                                                    fontSize: \"15px\",\n                                                    marginBottom: '20px'\n                                                }}\n                                                        onClick={handleSubscribe}\n                                                        variant=\"contained\">\n                                                    Partecipa\n                                                </Button>\n                                                :\n                                                <Button style={{\n                                                    borderRadius: 35,\n                                                    backgroundColor: \"#92d36e\",\n                                                    padding: \"10px 20px\",\n                                                    fontSize: \"15px\",\n                                                    marginBottom: '20px'\n                                                }}\n                                                        onClick={handleUnSubscribe}\n                                                        variant=\"contained\">\n                                                    Disiscriviti\n                                                </Button>}\n                            </Grid>\n                        </Grid></> : null\n            }\n            <Stack spacing={2} sx={{width: '100%'}}>\n                <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}\n                          anchorOrigin={{vertical: \"bottom\", horizontal: 'center'}}>\n                    <Alert onClose={handleClose} severity=\"success\" sx={{width: '100%'}}>\n                        {message}\n                    </Alert>\n                </Snackbar>\n            </Stack>\n            <Stack spacing={2} sx={{width: '100%'}}>\n                <Snackbar open={openError} autoHideDuration={3000} onClose={handleCloseError}\n                          anchorOrigin={{vertical: \"bottom\", horizontal: 'center'}}>\n                    <Alert onClose={handleCloseError} severity=\"warning\" sx={{width: '100%'}}>\n                        {messageError}\n                    </Alert>\n                </Snackbar>\n            </Stack>\n        </>\n\n    );\n}\n\nexport default InitiativeDetails;","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Vote/Votations.tsx",["166","167","168","169","170","171"],[],"import {AppBar, Button, Divider, Grid, IconButton, ToggleButton, ToggleButtonGroup, Typography} from \"@mui/material\";\nimport React, {useEffect, useState} from \"react\";\nimport '../App.css'\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport List from \"@mui/material/List\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport {isInstanceOfAuthError, logoutUser, TokenData} from \"../APIs/OauthAPI\";\nimport {activeButtonColor, ButtonStyleType, inactiveButtonColor} from \"../Utils/CustomComponents\";\nimport {getActiveVotations, getDoneVotations, getEndedVotations} from \"../APIs/VotationsAPI\";\nimport {User} from \"../APIs/UsersAPI\";\n\n\nconst Votations = () => {\n    const navigate = useNavigate()\n    const location = useLocation()\n    const tokenData : TokenData = location.state.token\n    const isVisitor: boolean = location.state.isVisitor\n    const user : User= location.state.user\n    const buttons = ['Attive', 'Concluse', 'Votate']\n    const [activeList, setActiveList] = useState<any[] | null>(null)\n    const [endedList, setEndedList] = useState<any[] | null>(null)\n    const [votedList, setVotedList] = useState<any[] | null>(null)\n    const [clickedVotation, setClickedVotation] = useState(null)\n    const [showModal, setShowModal] = useState(false)\n    const [firstButton, setFirstButton] = useState<ButtonStyleType>(activeButtonColor)\n    const [secondButton, setSecondButton] = useState<ButtonStyleType>(inactiveButtonColor)\n    const [thirdButton, setThirdButton] = useState<ButtonStyleType>(inactiveButtonColor)\n    const [activeButton, setActiveButton] = useState(buttons[0]);\n    const [firstLoad, setFirstLoad] = useState(true)\n    const [buttonChanged, setButtonChanged] = useState(false)\n    const [loginRequired, setLoginRequired] = useState(false)\n\n    const getActives = async () => {\n        const response = await getActiveVotations()\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setActiveList(response)\n        }\n    }\n\n    const getEndeds = async () => {\n        const response = await getEndedVotations()\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setEndedList(response)\n        }\n    }\n\n    const getVoted = async () => {\n        const response = await getDoneVotations(tokenData)\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setVotedList(response)\n        }\n    }\n\n    useEffect(() => {\n        if (firstLoad) {\n            if (activeList === null) {\n                getActives()\n            }\n        }\n        setFirstLoad(false)\n    }, [])\n\n\n    useEffect(() => {\n        if (buttonChanged) {\n            setLoginRequired(false)\n            if (activeButton === buttons[0]) {\n                getActives()\n            }\n            if (activeButton === buttons[1]) {\n                getEndeds()\n            }\n            if (activeButton === buttons[2]) {\n                if (!isVisitor && user !== null && tokenData !== null) {\n                    getVoted()\n                } else {\n                    setLoginRequired(true)\n                }\n            }\n        }\n        setButtonChanged(true)\n    }, [activeButton])\n\n\n    const handleChange = (event: React.MouseEvent<HTMLElement>, newActiveButton: string,) => {\n        if (newActiveButton === buttons[0]) {\n            setFirstButton(activeButtonColor)\n            setSecondButton(inactiveButtonColor)\n            setThirdButton(inactiveButtonColor)\n        } else if (newActiveButton === buttons[1]) {\n            setFirstButton(inactiveButtonColor)\n            setSecondButton(activeButtonColor)\n            setThirdButton(inactiveButtonColor)\n        } else if (newActiveButton === buttons[2]) {\n            setFirstButton(inactiveButtonColor)\n            setSecondButton(inactiveButtonColor)\n            setThirdButton(activeButtonColor)\n        }\n        setActiveButton(newActiveButton);\n    }\n\n    const logout = async () => {\n        if (tokenData !== null) {\n            const response = await logoutUser(tokenData)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    navigate('/')\n                } else {\n                    console.log('error')\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n    }\n\n    const goBack = () => {\n        navigate(-1)\n    }\n\n    const login = () => {\n        window.location.assign('http://localhost:8080/login')\n    }\n\n    const handleVotationDetailsOpen = (value: any) => {\n        navigate('/votations/votationDetails', {state: {token: tokenData, user: user, votation:value, isVisitor: isVisitor}})\n    }\n\n    return (\n        <Grid container direction=\"row\" spacing={2}>\n            <Grid item xs={12} justifyContent=\"center\" alignItems=\"center\">\n                <Box sx={{flexGrow: 1}}>\n                    <AppBar position=\"fixed\" sx={{backgroundColor: '#3d4347'}}>\n                        <Toolbar>\n                            <IconButton\n                                size=\"small\"\n                                edge=\"start\"\n                                aria-label=\"menu\"\n                                sx={{mr: 2}}\n                            >\n                                <ArrowBackIcon onClick={goBack} sx={{fontSize: '3rem', color: 'white'}}/>\n                            </IconButton>\n\n                            <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}\n                                        style={{\n                                            justifyContent: 'center',\n                                            color: '#feac0d',\n                                            textAlign: 'center',\n                                            fontSize: '1.8rem',\n                                        }}>\n                                Votazioni\n                            </Typography>\n                            <Button\n                                onClick={isVisitor ? login : logout}\n                                style={{\n                                    color: 'white',\n                                    backgroundColor: isVisitor ? \"green\" : \"red\",\n                                }}>\n\n                                {isVisitor ? \"login\" : \"logout\"}\n                            </Button>\n                        </Toolbar>\n                    </AppBar>\n                </Box>\n            </Grid>\n            <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\"\n                  sx={{position: 'fixed', top: '8%', margin: 'auto', width: '100%'}}>\n                <ToggleButtonGroup value={activeButton} exclusive onChange={handleChange} aria-label=\"Platform\">\n                    <ToggleButton style={{\n                        backgroundColor: firstButton.background,\n                        color: firstButton.color,\n                        borderColor: '#000000',\n                        fontSize: 'calc(15px+0.40vw)'\n                    }} value={buttons[0]}>{buttons[0]}</ToggleButton>\n                    <ToggleButton style={{\n                        backgroundColor: secondButton.background,\n                        color: secondButton.color,\n                        borderColor: '#000000',\n                        fontSize: 'calc(15px+0.40vw)'\n                    }} value={buttons[1]}>{buttons[1]}</ToggleButton>\n                    <ToggleButton style={{\n                        backgroundColor: thirdButton.background,\n                        color: thirdButton.color,\n                        borderColor: '#000000',\n                        fontSize: 'calc(15px+0.40vw)'\n                    }} value={buttons[2]}>{buttons[2]}</ToggleButton>\n                </ToggleButtonGroup>\n            </Grid>\n            {loginRequired && activeButton === buttons[2] ?\n                <Grid container sx={{position:'fixed', top: '40%'}}>\n                    <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                        <Typography variant=\"h4\" sx={{marginBottom: 2, paddingLeft: '10px', paddingRight:'10px', textAlign: 'center',}}>Per visualizzare le votazioni già effettuate devi effettuare il login</Typography>\n\n                    </Grid>\n                </Grid> : null}\n            <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <List sx={{\n                    width: '80%',\n                    overflow: 'auto',\n                    maxHeight: 580,\n                    position: 'fixed',\n                    top: 150,\n                    bottom: 100\n                }}>\n\n                    {activeList && activeButton===buttons[0] ? activeList.map((value, index) => {\n                        return (\n                            <><\n                                ListItem key={index}>\n                                <ListItemButton\n                                    onClick={() => handleVotationDetailsOpen(value)}>{value.title}</ListItemButton>\n                            </ListItem>\n                                <Divider color='white'/>\n                            </>\n                        );\n                    }) : endedList && activeButton===buttons[1] ? endedList.map((value, index) => {\n                        return (\n\n\n                            <><\n                                ListItem key={index}>\n                                <ListItemButton\n                                    onClick={() => handleVotationDetailsOpen(value)}>{value.title}</ListItemButton>\n                            </ListItem>\n                                <Divider color='white'/>\n                            </>\n                        );\n                    }) : votedList && activeButton===buttons[2] ? votedList.map((value, index) => {\n                        return (\n                            <><\n                                ListItem key={index}>\n                                <ListItemButton\n                                    onClick={() => handleVotationDetailsOpen(value)}>{value.title}</ListItemButton>\n                            </ListItem>\n                                <Divider color='white'/>\n                            </>\n                        );\n                    }) : null\n                    }\n                </List>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Votations;","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Initiative/InitiativeCreateForm.tsx",["172"],[],"import {AppBar, Button, Chip, Dialog, Divider, Grid, IconButton, Typography} from \"@mui/material\";\nimport React, {useEffect, useState} from \"react\";\nimport {CssTextField} from \"../Utils/CustomComponents\";\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport {Dayjs} from \"dayjs\";\nimport {DatePicker, LocalizationProvider} from \"@mui/x-date-pickers\";\nimport {AdapterDayjs} from \"@mui/x-date-pickers/AdapterDayjs\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport ErrorIcon from '@mui/icons-material/Error';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport {isInstanceOfAuthError, logoutUser, TokenData} from \"../APIs/OauthAPI\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport {createInitiative, Initiative, InitiativeType} from \"../APIs/InitiativeAPI\";\nimport {getAllUsersEmail} from \"../APIs/UsersAPI\";\n\nconst InitiativeCreateForm = () => {\n    const location = useLocation();\n    const navigate = useNavigate()\n    const types = [InitiativeType.FOOD, InitiativeType.SPORT, InitiativeType.SOCIAL, InitiativeType.OTHER, InitiativeType.EDUCATIONAL, InitiativeType.ENVIRONMENTAL, InitiativeType.HEALTH, InitiativeType.OTHER]\n    const [usersList, setUsersList] = useState<string[]| null>(null)\n    const [selectedUsers, setSelectedUsers] = useState<string[]>([])\n    const [selectedType, setSelectedType] = useState<any>(types[0])\n    const [startDate, setStartDate] = useState<Dayjs | null>(null);\n    const [endDate, setEndDate] = useState<Dayjs | null>(null);\n    const [description, setDescription] = useState<any>(null)\n    const [name, setName] = useState<any>(null)\n    const [place, setPlace] = useState<any>(null)\n    const [open, setOpen] =  useState(false);\n    const [errorOpen, setErrorOpen] = useState<any>(null)\n    const [errors, setErrors] = useState<any>([])\n    const tokenData : TokenData= location.state.token;\n\n    function toTimestamp(strDate: string){\n        const datum = Date.parse(strDate);\n        return datum/1000;\n    }\n\n    const getUsers = async () => {\n        const response = await getAllUsersEmail(tokenData)\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setUsersList(response.filter((email: string) => email !== tokenData.email))\n        }\n    }\n\n    useEffect(() => {\n        if(usersList === null){\n            getUsers()\n        }\n    },[])\n\n    const errorsCheck = () => {\n        setErrors([]);\n        let errors = []\n        if (name && description && place && startDate && endDate && selectedType) {\n            if (!startDate.isBefore(endDate)) {\n                errors.push('La data di inizio deve essere precedente alla data di fine')\n            }\n            if (description.length < 150) {\n                errors.push('La descrizione deve essere lunga almeno 150 caratteri')\n            }\n            if(name.length>50){\n                errors.push('Il nome deve essere lungo al massimo 50 caratteri')\n            }\n            if(name.length<5){\n                errors.push('Il nome deve essere lungo almeno 5 caratteri')\n            }\n        } else {\n            errors.push('Compila tutti i campi')\n        }\n\n        return errors\n    }\n\n    const makeid = (length: number) => {\n        let result = '';\n        let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        let charactersLength = characters.length;\n        for ( let i = 0; i < length; i++ ) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n    }\n\n    const handleCreateInitiative = async () => {\n        const errorsChecked = errorsCheck()\n        setErrors(errorsChecked)\n        if (errorsChecked.length === 0) {\n\n            const newInitiative: Initiative = {\n                id: makeid(15),\n                name: name,\n                description: description,\n                type: selectedType,\n                idCreator: tokenData.email,\n                idOrganizers: selectedUsers,\n                idMembers: [],\n                startDate: startDate !== null ? toTimestamp(startDate.toString()) : 0,\n                endDate: endDate !== null ? toTimestamp(endDate.toString()) : 0,\n                location: place,\n            }\n            const creation_response= await createInitiative(tokenData, newInitiative)\n            if( typeof creation_response === 'boolean'){\n                if(creation_response===true){\n                    setOpen(true)\n                } else if(creation_response===false) {\n                    setErrorOpen(true)\n                } else{\n                    navigate('/error', {state: {error: creation_response}})\n                }\n            }\n        }else{\n            setErrorOpen(true)\n        }\n    }\n\n    const handleTypeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSelectedType(event.target.value);\n    };\n    const handleDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setDescription(event.target.value);\n    }\n    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setName(event.target.value);\n    }\n\n    const handleLocationChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setPlace(event.target.value);\n    }\n\n    const handleUserAdd = (user: any) => {\n        if (!selectedUsers.includes(user)) {\n            setSelectedUsers([...selectedUsers, user])\n        }\n    }\n\n    const handleDelete = (userToDelete: any) => () => {\n        setSelectedUsers((users: any[]) => users.filter((user) => user !== userToDelete));\n    };\n\n    const handleDialogClose = () => {\n        setErrorOpen(false);\n    }\n\n    const handleSuccessDialogClose = () => {\n        setOpen(false);\n    }\n\n    const logout = async () => {\n        if (tokenData !== null) {\n            const response = await logoutUser(tokenData)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    navigate('/')\n                } else {\n                    console.log('error')\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n    }\n\n    const goBack = () => {\n        navigate(-1)\n    }\n\n    return (\n        <Grid container>\n            <Grid item xs={12} justifyContent=\"center\" alignItems=\"center\" >\n                <Box sx={{ flexGrow: 1 }}>\n                    <AppBar position=\"fixed\" sx={{backgroundColor:'#3d4347' }}>\n                        <Toolbar>\n                            <IconButton\n                                size=\"small\"\n                                edge=\"start\"\n                                aria-label=\"menu\"\n                                sx={{ mr: 2}}\n                            >\n                                <ArrowBackIcon onClick={goBack} sx={{fontSize: '3rem', color: 'white'}}/>\n                            </IconButton>\n                            <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}\n                                        style={{\n                                            justifyContent: 'center',\n                                            color: 'white',\n                                            textAlign: 'center',\n                                            fontSize: '1.8rem',\n                                        }}>I tuoi dati\n                            </Typography>\n                            <Button sx={{color: 'white', backgroundColor: 'red'}}\n                                    onClick={logout}>\n                                logout\n                            </Button>\n                        </Toolbar>\n                    </AppBar>\n                </Box>\n            </Grid>\n            <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <Typography style={{color: '#feac0d', textAlign: 'center', fontSize: '3rem'}}>Crea la tua\n                    iniziativa</Typography>\n            </Grid>\n            <Grid container direction='row' spacing={2}>\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}, width: '70%'}}\n                                  label={'Nome'} onChange={handleNameChange}/>\n                </Grid>\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}, width: '70%'}}\n                                  label={'Descrizione'} onChange={handleDescriptionChange}/>\n                </Grid>\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}, width: '70%'}}\n                                  label={'Luogo'} onChange={handleLocationChange}/>\n                </Grid>\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <CssTextField sx={{width: '70%', input: {color: 'white'}, style: {color: 'white'}}}\n                                  select\n                                  value={selectedType}\n                                  label='Tipo'\n                                  onChange={handleTypeChange}\n                                  InputProps={{inputProps: {style: {color: 'white',}}}}\n                    >\n                        {\n                            types.map((type) => {\n                                return <MenuItem value={type}>{type}</MenuItem>\n                            })\n                        }\n                    </CssTextField>\n                </Grid>\n                {\n                    selectedUsers.length > 0 ?\n                        <Grid container direction='row'>\n                            {\n                                selectedUsers.map((user: any) => {\n                                    return (\n                                        <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                                            <Chip sx={{backgroundColor: '#feac0d', marginTop: '10px'}}\n                                                  icon={<AccountCircleIcon sx={{color: 'white'}}/>}\n                                                  label={user}\n                                                  onDelete={handleDelete(user)}\n                                            />\n                                        </Grid>)\n                                })\n                            }\n                        </Grid>\n                        :\n                        null\n                }\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <FormControl sx={{width: '70%'}}>\n                        <CssTextField sx={{input: {color: 'white'}, style: {color: 'white'}}}\n                                      select\n                                      label='Organizzatori' InputProps={{inputProps: {style: {color: 'white',}}}}>\n                            {\n                                usersList ? usersList.map((user) => {\n                                    return <MenuItem onClick={() => {handleUserAdd(user)}} value={user}>{user}</MenuItem> }): null\n                            }\n                        </CssTextField>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                        <DatePicker\n                            inputFormat=\"DD/MM/YYYY\"\n                            label=\"Data inizio\"\n                            value={startDate}\n                            onChange={(newValue) => {\n                                setStartDate(newValue);\n                            }}\n                            renderInput={(params) => <CssTextField {...params} sx={{\n                                width: '70%',\n                                input: {color: 'white'},\n                                style: {color: 'white'}\n                            }}/>}\n                        />\n                    </LocalizationProvider>\n                </Grid>\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                        <DatePicker\n                            inputFormat=\"DD/MM/YYYY\"\n                            label=\"Data fine\"\n                            value={endDate}\n                            onChange={(newValue) => {\n                                setEndDate(newValue);\n                            }}\n                            renderInput={(params) => <CssTextField {...params} sx={{\n                                width: '70%',\n                                input: {color: 'white'},\n                                style: {color: 'white'}\n                            }}/>}\n                        />\n                    </LocalizationProvider>\n                </Grid>\n            </Grid>\n            <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <Button\n                    onClick={handleCreateInitiative}\n                    style={{\n                        marginTop: '15px',\n                        borderRadius: 35,\n                        backgroundColor: \"green\",\n                        padding: \"10px 20px\",\n                        fontSize: \"18px\"\n                    }}\n                    variant=\"contained\">\n                    CREA\n                </Button>\n            </Grid>\n            <Dialog maxWidth={\"sm\"} fullWidth={true} open={errorOpen} onClose={handleDialogClose}>\n                <DialogTitle>\n                        <Chip sx={{color: 'red'}}\n                              icon={<ErrorIcon sx={{color: 'red'}}/>}\n                              label={'Errore'}\n                              variant=\"outlined\"\n                        />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        {errors.length > 0 ?\n                            errors.map((error: string) => {\n                                return(<><Typography>{error}</Typography><Divider/></>)\n                            })\n                            :\n                            null}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDialogClose}>Chiudi</Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog maxWidth={\"sm\"} fullWidth={true} open={open} onClose={handleSuccessDialogClose}>\n                <DialogTitle>\n                    <Chip sx={{color: 'green'}}\n                          icon={<CheckCircleIcon sx={{color: 'red'}}/>}\n                          label={'Successo'}\n                          variant=\"outlined\"\n                    />\n                </DialogTitle>\n                <DialogActions>\n                    <Button onClick={handleSuccessDialogClose}>Continua a creare</Button>\n                    <Button onClick={goBack}>Vai alla iniziative</Button>\n                </DialogActions>\n            </Dialog>\n        </Grid>\n    )\n}\n\nexport default InitiativeCreateForm","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Login/LoginChoser.tsx",["173"],[],"import React, {useEffect, useState} from 'react';\nimport '../App.css';\nimport {Button, Grid, Typography} from \"@mui/material\";\nimport basquiaPulito from \"../imgs/logo_CivicLife.png\"\nimport {useNavigate} from \"react-router-dom\";\nimport {exchangeToken, isInstanceOfAuthError, TokenData} from \"../APIs/OauthAPI\";\n\nconst LoginChoser = () => {\n\n    const [firstLoad, setFirstLoad] = useState(true);\n    const [tokenData, setTokenData] = useState<TokenData| null>(null);\n\n    const getTokenData = async (token_cifrato: string) => {\n        const tokenResponse = await exchangeToken(token_cifrato);\n        if (isInstanceOfAuthError(tokenResponse)) {\n            navigate('/error', {state: {error: tokenResponse}})\n        } else {\n            if (tokenResponse) {\n                setTokenData(tokenResponse)\n                navigate('/home', {state: {tokenData: tokenResponse}})\n            } else {\n                console.log('error')\n            }\n\n        }\n    }\n\n    useEffect(() => {\n        if (firstLoad) {\n                if (window.location.href.includes('token=') && tokenData === null) {\n                    const token_cifrato = window.location.href.split(\"token=\")[1].toString()\n                    if (token_cifrato !== \"\") {\n                        getTokenData(token_cifrato)\n\n                    }\n                } else {\n                    console.log(\"token non presente\")\n                }\n            }\n        setFirstLoad(false)\n    }, [])\n\n    const navigate = useNavigate();\n    const loginWithService = () => {\n        window.location.assign('http://localhost:8080/login')\n    }\n\n\n    const loginAsVisitor = () => {\n        navigate('/home', {state: {isVisitor: true}})\n    }\n\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <img src={basquiaPulito} width=\"320px\" height=\"320px\" alt={'civicLife Logo'}/>\n                </Grid>\n                <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <Typography style={{color: 'white', textAlign: 'center', fontSize: '4rem'}}>LOGIN</Typography>\n                </Grid>\n            </Grid>\n            <Grid container >\n                <Grid item xs={6} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <Button\n                        onClick={loginWithService}\n                        style={{\n                            position: 'absolute',\n                            marginBottom: '100px',\n                            borderRadius: 35,\n                            backgroundColor: \"#21b6ae\",\n                            padding: \"18px 36px\",\n                            fontSize: \"25px\"\n                        }}\n                        variant=\"contained\">Accedi</Button>\n                </Grid>\n                <Grid item xs={6} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <Button\n                        onClick={loginAsVisitor}\n                        style={{\n                            position: 'absolute',\n                            marginBottom: '100px',\n                            borderRadius: 35,\n                            backgroundColor: \"#feac0d\",\n                            padding: \"18px 36px\",\n                            fontSize: \"25px\"\n                        }}\n                        variant=\"contained\">Ospite</Button>\n                </Grid>\n            </Grid>\n        </>\n\n    );\n}\n\nexport default LoginChoser;\n\n","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Vote/VotationsAdmin.tsx",["174","175"],[],"import {\n    AppBar,\n    Button,\n    Dialog,\n    Divider,\n    Grid,\n    IconButton,\n    ListItemSecondaryAction,\n    ListItemText,\n    ToggleButton,\n    ToggleButtonGroup,\n    Typography\n} from \"@mui/material\";\nimport React, {useEffect, useState} from \"react\";\nimport '../App.css'\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport List from \"@mui/material/List\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport {isInstanceOfAuthError, logoutUser} from \"../APIs/OauthAPI\";\nimport {activeButtonColor, ButtonStyleType, inactiveButtonColor} from \"../Utils/CustomComponents\";\nimport {\n    changeVotationStatus,\n    getActiveVotations,\n    getEndedVotations,\n    getProgrammedVotations,\n    Votation,\n    VotationStatus\n} from \"../APIs/VotationsAPI\";\n\n\nconst VotationsAdmin = () => {\n    const navigate = useNavigate()\n    const location = useLocation()\n    const tokenData = location.state.token\n    const buttons = ['Attive', 'Concluse','Programmate']\n    const [clickedVotation, setClickedVotation] = useState<Votation | null>(null)\n    const [activeVotations, setactiveVotations] = useState<Votation[] | null>(null)\n    const [endedVotations, setEndedVotations] = useState<Votation[] | null>(null)\n    const [programmedVotations, setProgrammedVotations] = useState<Votation[] | null>(null)\n    const [firstButton, setFirstButton] = useState<ButtonStyleType>(activeButtonColor)\n    const [secondButton, setSecondButton] = useState<ButtonStyleType>(inactiveButtonColor)\n    const [thirdButton, setThirdButton] = useState<ButtonStyleType>(inactiveButtonColor)\n    const [activeButton, setActiveButton] = useState(buttons[0]);\n    const [firstLoad, setFirstLoad] = useState(true)\n    const [buttonChanged, setButtonChanged] = useState(false)\n\n    const getActives = async () => {\n        const response = await getActiveVotations()\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setactiveVotations(response)\n        }\n    }\n\n    const getEndeds = async () => {\n        const response = await getEndedVotations()\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setEndedVotations(response)\n        }\n    }\n\n    const getProgrammed = async () => {\n        const response = await getProgrammedVotations(tokenData)\n        if (isInstanceOfAuthError(response)) {\n            navigate('/error', {state: {error: response}})\n        } else {\n            setProgrammedVotations(response)\n        }\n    }\n\n    useEffect(() => {\n        if (firstLoad) {\n            if (activeVotations === null) {\n                getActives()\n            }\n        }\n        setFirstLoad(false)\n    }, [])\n\n    useEffect(() => {\n        if (buttonChanged) {\n            if (activeButton === buttons[0]) {\n                getActives()\n            }\n            if (activeButton === buttons[1]) {\n                getEndeds()\n            }\n            if(activeButton === buttons[2]){\n                getProgrammed()\n            }\n        }\n        setButtonChanged(true)\n    }, [activeButton])\n\n\n    const handleVotationDetailsOpen = (value: any) => {\n        navigate('/votations/votationDetails', {state: {token: tokenData, votation: value}})\n    }\n\n    const handleDisable = async (value: any) => {\n        const result = await changeVotationStatus(tokenData, value.title, VotationStatus.TERMINATED)\n        if(typeof result === 'boolean'){\n            if(result){\n                handleDialogClose()\n                getActives()\n            }\n        }else{\n            navigate('/error', {state: {error: result}})\n        }\n    }\n    const handleEnable = async (value: any) => {\n        const result = await changeVotationStatus(tokenData, value.title, VotationStatus.ACTIVE)\n        if(typeof result === 'boolean'){\n            if(result){\n                handleDialogClose()\n                getProgrammed()\n            }\n        }else{\n            navigate('/error', {state: {error: result}})\n        }\n    }\n\n    const handleVotationClick = (value: any) => {\n        setClickedVotation(value)\n    }\n\n    const handleDialogClose = () => {\n        setClickedVotation(null)\n    }\n\n    const handleChange = (event: React.MouseEvent<HTMLElement>, newActiveButton: string,) => {\n        if (newActiveButton === buttons[0]) {\n            setFirstButton(activeButtonColor)\n            setSecondButton(inactiveButtonColor)\n            setThirdButton(inactiveButtonColor)\n        } else if (newActiveButton === buttons[1]) {\n            setFirstButton(inactiveButtonColor)\n            setSecondButton(activeButtonColor)\n            setThirdButton(inactiveButtonColor)\n        } else if (newActiveButton === buttons[2]) {\n            setFirstButton(inactiveButtonColor)\n            setSecondButton(inactiveButtonColor)\n            setThirdButton(activeButtonColor)\n        }\n        setActiveButton(newActiveButton);\n    }\n\n    const logout = async () => {\n        if (tokenData !== null) {\n            const response = await logoutUser(tokenData)\n            if (typeof response === 'boolean') {\n                if (response) {\n                    navigate('/')\n                } else {\n                    console.log('error')\n                }\n            } else {\n                navigate('/error', {state: {error: response}})\n            }\n        }\n    }\n\n    const goBack = () => {\n        navigate(-1)\n    }\n\n    const statusTyphografy = (status: VotationStatus) => {\n        if (status === VotationStatus.ACTIVE) {\n            return <Typography sx={{color: 'green'}}>Attivo</Typography>\n        } else if (status === VotationStatus.TERMINATED) {\n            return <Typography sx={{color: 'red'}}>Terminata</Typography>\n        } else if( status === VotationStatus.PROGRAMMED){\n            return <Typography sx={{color: 'orange'}}>Programmata</Typography>\n        }\n    }\n\n    return (\n        <Grid container direction=\"row\" spacing={2}>\n            <Grid item xs={12} justifyContent=\"center\" alignItems=\"center\">\n                <Box sx={{flexGrow: 1}}>\n                    <AppBar position=\"fixed\" sx={{backgroundColor: '#3d4347'}}>\n                        <Toolbar>\n                            <IconButton\n                                size=\"small\"\n                                edge=\"start\"\n                                aria-label=\"menu\"\n                                sx={{mr: 2}}\n                            >\n                                <ArrowBackIcon onClick={goBack} sx={{fontSize: '3rem', color: 'white'}}/>\n                            </IconButton>\n\n                            <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}\n                                        style={{\n                                            justifyContent: 'center',\n                                            color: '#feac0d',\n                                            textAlign: 'center',\n                                            fontSize: '1.8rem',\n                                        }}>\n                                Moderazione votazioni\n                            </Typography>\n                            <Button\n                                onClick={logout}\n                                style={{\n                                    color: 'white',\n                                    backgroundColor: \"red\",\n                                }}>\n\n                                logout\n                            </Button>\n                        </Toolbar>\n                    </AppBar>\n                </Box>\n            </Grid>\n            <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\"\n                  sx={{position: 'fixed', top: '8%', margin: 'auto', width: '100%'}}>\n                <ToggleButtonGroup value={activeButton} exclusive onChange={handleChange} aria-label=\"Platform\">\n                    <ToggleButton style={{\n                        backgroundColor: firstButton.background,\n                        color: firstButton.color,\n                        borderColor: '#000000',\n                        fontSize: 'calc(15px+0.40vw)'\n                    }} value={buttons[0]}>{buttons[0]}</ToggleButton>\n                    <ToggleButton style={{\n                        backgroundColor: secondButton.background,\n                        color: secondButton.color,\n                        borderColor: '#000000',\n                        fontSize: 'calc(15px+0.40vw)'\n                    }} value={buttons[1]}>{buttons[1]}</ToggleButton>\n                    <ToggleButton style={{\n                        backgroundColor: thirdButton.background,\n                        color: thirdButton.color,\n                        borderColor: '#000000',\n                        fontSize: 'calc(15px+0.40vw)'\n                    }} value={buttons[2]}>{buttons[2]}</ToggleButton>\n                </ToggleButtonGroup>\n            </Grid>\n            <Grid item xs={12} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <List sx={{\n                    width: '80%',\n                    overflow: 'auto',\n                    maxHeight: 580,\n                    position: 'fixed',\n                    top: 150,\n                    bottom: 100\n                }}>\n                    {activeButton === buttons[0] && activeVotations ? activeVotations.map((value, index) => {\n                        return (\n                            <>\n                                <ListItem key={index} onClick={() => handleVotationClick(value)}>\n                                <ListItemButton>\n                                    <ListItemText primary={<Typography sx={{fontSize: '1.2rem', fontWeight: 'bold'}}>{value.title}</Typography>}/>\n                                </ListItemButton>\n                                <ListItemSecondaryAction>{statusTyphografy(value.status)}</ListItemSecondaryAction>\n                            </ListItem>\n                                <Divider color='white'/>\n                            </>\n                        );\n                    }) : activeButton === buttons[1] && endedVotations ? endedVotations.map((value, index) => {\n                        return (\n                            <>\n                                <ListItem key={index} onClick={() => handleVotationClick(value)}>\n                                    <ListItemButton>\n                                        <ListItemText primary={<Typography sx={{fontSize: '1.2rem', fontWeight: 'bold'}}>{value.title}</Typography>}/>\n                                    </ListItemButton>\n                                    <ListItemSecondaryAction>{statusTyphografy(value.status)}</ListItemSecondaryAction>\n                                </ListItem>\n                                <Divider color='white'/>\n                            </>\n                        );\n                    }) : activeButton === buttons[2] && programmedVotations ? programmedVotations.map((value, index) => {\n                        return (\n                            <>\n                                <ListItem key={index} onClick={() => handleVotationClick(value)}>\n                                    <ListItemButton>\n                                        <ListItemText primary={<Typography sx={{fontSize: '1.2rem', fontWeight: 'bold'}}>{value.title}</Typography>}/>\n                                    </ListItemButton>\n                                    <ListItemSecondaryAction>{statusTyphografy(value.status)}</ListItemSecondaryAction>\n                                </ListItem>\n                                <Divider color='white'/>\n                            </>\n                        );\n                    }):null}\n                </List>\n            </Grid>\n            <Dialog maxWidth={\"sm\"} fullWidth={true} open={clickedVotation !== null} onClose={handleDialogClose}>\n                <DialogTitle>Operazioni su votazione</DialogTitle>\n\n                <DialogActions>\n                    <Button onClick={handleDialogClose}>Chiudi</Button>\n                    {clickedVotation && clickedVotation.status===VotationStatus.TERMINATED? null:\n                        clickedVotation && clickedVotation.status===VotationStatus.ACTIVE?\n                            <Button onClick={() => handleDisable(clickedVotation)}>Termina</Button>:\n                            clickedVotation && clickedVotation.status===VotationStatus.PROGRAMMED?\n                                <Button onClick={() => handleEnable(clickedVotation)}>Attiva</Button>:null}\n                    <Button onClick={() => handleVotationDetailsOpen(clickedVotation)}>Visualizza Dettagli</Button>\n                </DialogActions>\n            </Dialog>\n        </Grid>\n    )\n}\n\nexport default VotationsAdmin;","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/APIs/UsersAPI.ts",[],[],"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/APIs/OauthAPI.ts",[],[],"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Data/AuthRequired.tsx",[],[],[],"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/APIs/ExternalResourcesAPI.ts",[],[],"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Error.tsx",["176"],[],"import React, {useEffect, useState} from \"react\";\nimport {Button, Grid, styled, TableBody, TableContainer, TableHead, Typography} from \"@mui/material\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport Table from '@mui/material/Table';\nimport TableCell, {tableCellClasses} from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport CancelTwoToneIcon from '@mui/icons-material/CancelTwoTone';\nimport {AuthError, ValidateCode} from \"./APIs/OauthAPI\";\n\nconst Error = () => {\n    const location = useLocation()\n    const error = location.state.error\n    const navigate = useNavigate()\n    const [errorReason, setErrorReason] = useState<AuthError|null>(null)\n    const [infoList, setInfoList] = useState<string[]>([])\n\n    useEffect(() => {\n        if (infoList.length === 0 && error!==undefined) {\n            console.log(error)\n            setErrorReason(error)\n            splittedRequest(error)\n        }\n        else if (window.location.href.includes('errorReason=')) {\n                const errorReason = window.location.href.split(\"errorReason=\")[1].toString()\n                const authError= generateErrorReason(errorReason)\n                setErrorReason(authError)\n                splittedRequest(authError)\n        } else{\n            navigate('/')\n        }\n    },[])\n\n    const StyledTableCell = styled(TableCell)(({theme}) => ({\n        [`&.${tableCellClasses.head}`]: {\n            backgroundColor: theme.palette.common.black,\n            color: theme.palette.common.white,\n        },\n        [`&.${tableCellClasses.body}`]: {\n            fontSize: 14,\n        },\n    }));\n\n    const generateErrorReason = (errorReason:string) => {\n        const path = errorReason.split('requestedPath=')[1].split(',')[0]\n        const method = errorReason.split('method=')[1].split(',')[0]\n        const authError : AuthError = {\n            code: ValidateCode.AUTH_SERVER_ERROR,\n            requestedPath: path,\n            method: method\n        }\n        return authError\n\n    }\n\n    const splittedRequest = (errorReason:AuthError) => {\n        if(errorReason!==null) {\n            const path = errorReason.requestedPath.split('/')\n            const returnValue = []\n            let pathtoprint = ''\n            for (let value = 0; value < path.length; value++) {\n                if (path[value] !== '') {\n                    if (value === 2) {\n                        let split = path[value].split(':')\n                        returnValue.push(split[0])\n                        returnValue.push(split[1])\n\n                    }\n                    if (value === 3) {\n                        returnValue.push(path[value])\n                    }\n                    if (value > 4) {\n                        pathtoprint += path[value] + '/'\n                    }\n                }\n            }\n            returnValue.push(pathtoprint)\n\n            setInfoList(returnValue)\n        }\n    }\n\n    return (\n        <Grid container direction={'column'} spacing={3}>\n            <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <CancelTwoToneIcon style={{color: 'red', fontSize: '7rem'}}/>\n            </Grid>\n            <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <Typography variant={'h2'}>\n                    ATTENZIONE\n                </Typography>\n            </Grid>\n            {\n                infoList.length > 3 && errorReason ?\n\n            <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <TableContainer sx={{backgroundColor:'white', width:'90%'}}>\n                    <Table aria-label='customized-table'>\n                        <TableHead>\n                            <TableRow>\n                                <StyledTableCell>info</StyledTableCell>\n                                <StyledTableCell align='right'>value</StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            <TableRow>\n                                <StyledTableCell component='th' scope='row'>Error code</StyledTableCell>\n                                <StyledTableCell align='right'>{errorReason.code}</StyledTableCell>\n                            </TableRow>\n                            <TableRow>\n                                <StyledTableCell component='th' scope='row'>Method</StyledTableCell>\n                                <StyledTableCell align='right'>{errorReason.method}</StyledTableCell>\n                            </TableRow>\n                            <TableRow>\n                                <StyledTableCell component='th' scope='row'>IP</StyledTableCell>\n                                <StyledTableCell align='right'>{infoList[0]}</StyledTableCell>\n                            </TableRow>\n                            <TableRow>\n                                <StyledTableCell component='th' scope='row'>Port</StyledTableCell>\n                                <StyledTableCell align='right'>{infoList[1]}</StyledTableCell>\n                            </TableRow>\n                            <TableRow>\n                                <StyledTableCell component='th' scope='row'>Micro Service</StyledTableCell>\n                                <StyledTableCell align='right'>{infoList[2]}</StyledTableCell>\n                            </TableRow>\n                            <TableRow>\n                                <StyledTableCell component='th' scope='row'>Api</StyledTableCell>\n                                <StyledTableCell align='right'>{infoList[3]}</StyledTableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>: null\n            }\n            <Grid item display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <Button style={{\n                    borderRadius: 35,\n                    backgroundColor: \"red\",\n                    padding: \"10px 20px\",\n                    fontSize: \"18px\"\n                }}\n                        variant=\"contained\"\n                        onClick={() => {\n                            navigate('/')\n                        }}>\n                    torna al login\n                </Button>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default Error;","/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/APIs/InitiativeAPI.ts",[],[],"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/APIs/VotationsAPI.ts",[],[],"/home/michelestaffieri/Documenti/Taass/CivicLife/CivicLife/frontend/src/Utils/CustomComponents.tsx",[],[],{"ruleId":"177","severity":1,"message":"178","line":4,"column":8,"nodeType":"179","messageId":"180","endLine":4,"endColumn":13},{"ruleId":"177","severity":1,"message":"181","line":3,"column":17,"nodeType":"179","messageId":"180","endLine":3,"endColumn":28},{"ruleId":"177","severity":1,"message":"182","line":2,"column":5,"nodeType":"179","messageId":"180","endLine":2,"endColumn":11},{"ruleId":"183","severity":1,"message":"184","line":77,"column":8,"nodeType":"185","endLine":77,"endColumn":10,"suggestions":"186"},{"ruleId":"183","severity":1,"message":"187","line":86,"column":7,"nodeType":"185","endLine":86,"endColumn":9,"suggestions":"188"},{"ruleId":"183","severity":1,"message":"189","line":55,"column":8,"nodeType":"185","endLine":55,"endColumn":10,"suggestions":"190"},{"ruleId":"177","severity":1,"message":"191","line":46,"column":22,"nodeType":"179","messageId":"180","endLine":46,"endColumn":33},{"ruleId":"177","severity":1,"message":"192","line":49,"column":12,"nodeType":"179","messageId":"180","endLine":49,"endColumn":23},{"ruleId":"183","severity":1,"message":"193","line":92,"column":8,"nodeType":"185","endLine":92,"endColumn":14,"suggestions":"194"},{"ruleId":"183","severity":1,"message":"195","line":266,"column":8,"nodeType":"185","endLine":266,"endColumn":22,"suggestions":"196"},{"ruleId":"183","severity":1,"message":"197","line":43,"column":5,"nodeType":"179","endLine":43,"endColumn":14,"suggestions":"198"},{"ruleId":"177","severity":1,"message":"199","line":48,"column":12,"nodeType":"179","messageId":"180","endLine":48,"endColumn":29},{"ruleId":"177","severity":1,"message":"200","line":48,"column":31,"nodeType":"179","messageId":"180","endLine":48,"endColumn":51},{"ruleId":"183","severity":1,"message":"201","line":116,"column":8,"nodeType":"185","endLine":116,"endColumn":10,"suggestions":"202"},{"ruleId":"183","severity":1,"message":"203","line":134,"column":8,"nodeType":"185","endLine":134,"endColumn":22,"suggestions":"204"},{"ruleId":"183","severity":1,"message":"205","line":80,"column":8,"nodeType":"185","endLine":80,"endColumn":10,"suggestions":"206"},{"ruleId":"183","severity":1,"message":"207","line":92,"column":8,"nodeType":"185","endLine":92,"endColumn":20,"suggestions":"208"},{"ruleId":"177","severity":1,"message":"209","line":287,"column":11,"nodeType":"179","messageId":"180","endLine":287,"endColumn":27},{"ruleId":"177","severity":1,"message":"210","line":27,"column":12,"nodeType":"179","messageId":"180","endLine":27,"endColumn":27},{"ruleId":"177","severity":1,"message":"211","line":27,"column":29,"nodeType":"179","messageId":"180","endLine":27,"endColumn":47},{"ruleId":"177","severity":1,"message":"212","line":28,"column":12,"nodeType":"179","messageId":"180","endLine":28,"endColumn":21},{"ruleId":"177","severity":1,"message":"213","line":28,"column":23,"nodeType":"179","messageId":"180","endLine":28,"endColumn":35},{"ruleId":"183","severity":1,"message":"214","line":71,"column":8,"nodeType":"185","endLine":71,"endColumn":10,"suggestions":"215"},{"ruleId":"183","severity":1,"message":"216","line":92,"column":8,"nodeType":"185","endLine":92,"endColumn":22,"suggestions":"217"},{"ruleId":"183","severity":1,"message":"218","line":59,"column":7,"nodeType":"185","endLine":59,"endColumn":9,"suggestions":"219"},{"ruleId":"183","severity":1,"message":"220","line":41,"column":8,"nodeType":"185","endLine":41,"endColumn":10,"suggestions":"221"},{"ruleId":"183","severity":1,"message":"222","line":87,"column":8,"nodeType":"185","endLine":87,"endColumn":10,"suggestions":"223"},{"ruleId":"183","severity":1,"message":"224","line":102,"column":8,"nodeType":"185","endLine":102,"endColumn":22,"suggestions":"225"},{"ruleId":"183","severity":1,"message":"226","line":31,"column":7,"nodeType":"185","endLine":31,"endColumn":9,"suggestions":"227"},"@typescript-eslint/no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'createTheme' is defined but never used.","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getVotationParties', 'partyList', and 'votation'. Either include them or remove the dependency array.","ArrayExpression",["228"],"React Hook useEffect has missing dependencies: 'candidateList', 'getCandidatesList', and 'party'. Either include them or remove the dependency array.",["229"],"React Hook useEffect has missing dependencies: 'firstLoad', 'getUserData', and 'tokenData'. Either include them or remove the dependency array.",["230"],"'setDataList' is assigned a value but never used.","'showingList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loadBonuses' and 'loadVaccines'. Either include them or remove the dependency array.",["231"],"React Hook useEffect has missing dependencies: 'buttons' and 'user'. Either include them or remove the dependency array.",["232"],"React Hook useEffect contains a call to 'setFirstLoad'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [firstLoad, getUsers] as a second argument to the useEffect Hook.",["233"],"'clickedInitiative' is assigned a value but never used.","'setClickedInitiative' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'allInitiativesList', 'firstLoad', 'getInitiatives', 'getInitiativesReadOnly', and 'isVisitor'. Either include them or remove the dependency array.",["234"],"React Hook useEffect has missing dependencies: 'buttonChanged', 'buttons', 'getInitiatives', 'getMy', 'getOrganized', and 'getSubscribed'. Either include them or remove the dependency array.",["235"],"React Hook useEffect has missing dependencies: 'getInitiative' and 'initiative'. Either include them or remove the dependency array.",["236"],"React Hook useEffect has missing dependencies: 'getUsers', 'isVisitor', 'user.email', and 'usersList'. Either include them or remove the dependency array.",["237"],"'handleClickError' is assigned a value but never used.","'clickedVotation' is assigned a value but never used.","'setClickedVotation' is assigned a value but never used.","'showModal' is assigned a value but never used.","'setShowModal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activeList', 'firstLoad', and 'getActives'. Either include them or remove the dependency array.",["238"],"React Hook useEffect has missing dependencies: 'buttonChanged', 'buttons', 'getActives', 'getEndeds', 'getVoted', 'isVisitor', 'tokenData', and 'user'. Either include them or remove the dependency array.",["239"],"React Hook useEffect has missing dependencies: 'getUsers' and 'usersList'. Either include them or remove the dependency array.",["240"],"React Hook useEffect has missing dependencies: 'firstLoad', 'getTokenData', and 'tokenData'. Either include them or remove the dependency array.",["241"],"React Hook useEffect has missing dependencies: 'activeVotations', 'firstLoad', and 'getActives'. Either include them or remove the dependency array.",["242"],"React Hook useEffect has missing dependencies: 'buttonChanged', 'buttons', 'getActives', 'getEndeds', and 'getProgrammed'. Either include them or remove the dependency array.",["243"],"React Hook useEffect has missing dependencies: 'error', 'infoList.length', and 'navigate'. Either include them or remove the dependency array.",["244"],{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},"Update the dependencies array to be: [getVotationParties, partyList, votation]",{"range":"279","text":"280"},"Update the dependencies array to be: [candidateList, getCandidatesList, party]",{"range":"281","text":"282"},"Update the dependencies array to be: [firstLoad, getUserData, tokenData]",{"range":"283","text":"284"},"Update the dependencies array to be: [loadBonuses, loadVaccines, user]",{"range":"285","text":"286"},"Update the dependencies array to be: [activeButton, buttons, user]",{"range":"287","text":"288"},"Add dependencies array: [firstLoad, getUsers]",{"range":"289","text":"290"},"Update the dependencies array to be: [allInitiativesList, firstLoad, getInitiatives, getInitiativesReadOnly, isVisitor]",{"range":"291","text":"292"},"Update the dependencies array to be: [activeButton, buttonChanged, buttons, getInitiatives, getMy, getOrganized, getSubscribed]",{"range":"293","text":"294"},"Update the dependencies array to be: [getInitiative, initiative]",{"range":"295","text":"296"},"Update the dependencies array to be: [getUsers, initiative, isVisitor, user.email, usersList]",{"range":"297","text":"298"},"Update the dependencies array to be: [activeList, firstLoad, getActives]",{"range":"299","text":"300"},"Update the dependencies array to be: [activeButton, buttonChanged, buttons, getActives, getEndeds, getVoted, isVisitor, tokenData, user]",{"range":"301","text":"302"},"Update the dependencies array to be: [getUsers, usersList]",{"range":"303","text":"304"},"Update the dependencies array to be: [firstLoad, getTokenData, tokenData]",{"range":"305","text":"306"},"Update the dependencies array to be: [activeVotations, firstLoad, getActives]",{"range":"307","text":"308"},"Update the dependencies array to be: [activeButton, buttonChanged, buttons, getActives, getEndeds, getProgrammed]",{"range":"309","text":"310"},"Update the dependencies array to be: [error, infoList.length, navigate]",{"range":"311","text":"312"},[2567,2569],"[getVotationParties, partyList, votation]",[2643,2645],"[candidateList, getCandidatesList, party]",[1764,1766],"[firstLoad, getUserData, tokenData]",[4198,4204],"[loadBonuses, loadVaccines, user]",[9850,9864],"[activeButton, buttons, user]",[1632,1632],", [firstLoad, getUsers]",[4190,4192],"[allInitiativesList, firstLoad, getInitiatives, getInitiativesReadOnly, isVisitor]",[4658,4672],"[activeButton, buttonChanged, buttons, getInitiatives, getMy, getOrganized, getSubscribed]",[3211,3213],"[getInitiative, initiative]",[3438,3450],"[getUsers, initiative, isVisitor, user.email, usersList]",[2952,2954],"[activeList, firstLoad, getActives]",[3523,3537],"[activeButton, buttonChanged, buttons, getActives, getEndeds, getVoted, isVisitor, tokenData, user]",[2856,2858],"[getUsers, usersList]",[1457,1459],"[firstLoad, getTokenData, tokenData]",[3075,3077],"[activeVotations, firstLoad, getActives]",[3449,3463],"[activeButton, buttonChanged, buttons, getActives, getEndeds, getProgrammed]",[1315,1317],"[error, infoList.length, navigate]"]